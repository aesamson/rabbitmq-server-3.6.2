diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/credit_flow.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/credit_flow.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/credit_flow.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/credit_flow.erl	2016-07-23 16:47:51.828082697 +0300
@@ -72,13 +72,13 @@
 -opaque(bump_msg() :: {pid(), non_neg_integer()}).
 -type(credit_spec() :: {non_neg_integer(), non_neg_integer()}).
 
--spec(send/1 :: (pid()) -> 'ok').
--spec(send/2 :: (pid(), credit_spec()) -> 'ok').
--spec(ack/1 :: (pid()) -> 'ok').
--spec(ack/2 :: (pid(), credit_spec()) -> 'ok').
--spec(handle_bump_msg/1 :: (bump_msg()) -> 'ok').
--spec(blocked/0 :: () -> boolean()).
--spec(peer_down/1 :: (pid()) -> 'ok').
+-spec send(pid()) -> 'ok'.
+-spec send(pid(), credit_spec()) -> 'ok'.
+-spec ack(pid()) -> 'ok'.
+-spec ack(pid(), credit_spec()) -> 'ok'.
+-spec handle_bump_msg(bump_msg()) -> 'ok'.
+-spec blocked() -> boolean().
+-spec peer_down(pid()) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/gen_server2.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/gen_server2.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/gen_server2.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/gen_server2.erl	2016-07-23 17:21:32.085687479 +0300
@@ -228,11 +228,11 @@
 
 -type(gs2_state() :: #gs2_state{}).
 
--spec(handle_common_termination/3 ::
-        (any(), atom(), gs2_state()) -> no_return()).
--spec(hibernate/1 :: (gs2_state()) -> no_return()).
--spec(pre_hibernate/1 :: (gs2_state()) -> no_return()).
--spec(system_terminate/4 :: (_, _, _, gs2_state()) -> no_return()).
+-spec handle_common_termination
+        (any(), atom(), gs2_state()) -> no_return().
+-spec hibernate(gs2_state()) -> no_return().
+-spec pre_hibernate(gs2_state()) -> no_return().
+-spec system_terminate(_, _, _, gs2_state()) -> no_return().
 
 -type(millis() :: non_neg_integer()).
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/pmon.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/pmon.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/pmon.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/pmon.erl	2016-07-23 16:42:48.489193078 +0300
@@ -47,15 +47,15 @@
 
 -type(item()         :: pid() | {atom(), node()}).
 
--spec(new/0          :: () -> ?MODULE()).
--spec(new/1          :: ('erlang' | 'delegate') -> ?MODULE()).
--spec(monitor/2      :: (item(), ?MODULE()) -> ?MODULE()).
--spec(monitor_all/2  :: ([item()], ?MODULE()) -> ?MODULE()).
--spec(demonitor/2    :: (item(), ?MODULE()) -> ?MODULE()).
--spec(is_monitored/2 :: (item(), ?MODULE()) -> boolean()).
--spec(erase/2        :: (item(), ?MODULE()) -> ?MODULE()).
--spec(monitored/1    :: (?MODULE()) -> [item()]).
--spec(is_empty/1     :: (?MODULE()) -> boolean()).
+-spec new() -> ?MODULE().
+-spec new('erlang' | 'delegate') -> ?MODULE().
+-spec monitor(item(), ?MODULE()) -> ?MODULE().
+-spec monitor_all([item()], ?MODULE()) -> ?MODULE().
+-spec demonitor(item(), ?MODULE()) -> ?MODULE().
+-spec is_monitored(item(), ?MODULE()) -> boolean().
+-spec erase(item(), ?MODULE()) -> ?MODULE().
+-spec monitored(?MODULE()) -> [item()].
+-spec is_empty(?MODULE()) -> boolean().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/priority_queue.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/priority_queue.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/priority_queue.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/priority_queue.erl	2016-07-23 17:38:39.146927888 +0300
@@ -54,21 +54,21 @@
 -type(squeue() :: {queue, [any()], [any()], non_neg_integer()}).
 -type(pqueue() ::  squeue() | {pqueue, [{priority(), squeue()}]}).
 
--spec(new/0 :: () -> pqueue()).
--spec(is_queue/1 :: (any()) -> boolean()).
--spec(is_empty/1 :: (pqueue()) -> boolean()).
--spec(len/1 :: (pqueue()) -> non_neg_integer()).
--spec(to_list/1 :: (pqueue()) -> [{priority(), any()}]).
--spec(from_list/1 :: ([{priority(), any()}]) -> pqueue()).
--spec(in/2 :: (any(), pqueue()) -> pqueue()).
--spec(in/3 :: (any(), priority(), pqueue()) -> pqueue()).
--spec(out/1 :: (pqueue()) -> {empty | {value, any()}, pqueue()}).
--spec(out_p/1 :: (pqueue()) -> {empty | {value, any(), priority()}, pqueue()}).
--spec(join/2 :: (pqueue(), pqueue()) -> pqueue()).
--spec(filter/2 :: (fun ((any()) -> boolean()), pqueue()) -> pqueue()).
--spec(fold/3 ::
-        (fun ((any(), priority(), A) -> A), A, pqueue()) -> A).
--spec(highest/1 :: (pqueue()) -> priority() | 'empty').
+-spec new() -> pqueue().
+-spec is_queue(any()) -> boolean().
+-spec is_empty(pqueue()) -> boolean().
+-spec len(pqueue()) -> non_neg_integer().
+-spec to_list(pqueue()) -> [{priority(), any()}].
+-spec from_list([{priority(), any()}]) -> pqueue().
+-spec in(any(), pqueue()) -> pqueue().
+-spec in(any(), priority(), pqueue()) -> pqueue().
+-spec out(pqueue()) -> {empty | {value, any()}, pqueue()}.
+-spec out_p(pqueue()) -> {empty | {value, any(), priority()}, pqueue()}.
+-spec join(pqueue(), pqueue()) -> pqueue().
+-spec filter(fun ((any()) -> boolean()), pqueue()) -> pqueue().
+-spec fold
+        (fun ((any(), priority(), A) -> A), A, pqueue()) -> A.
+-spec highest(pqueue()) -> priority() | 'empty'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_amqqueue.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_amqqueue.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_amqqueue.erl	2016-04-18 02:53:08.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_amqqueue.erl	2016-07-23 17:18:12.896416618 +0300
@@ -68,78 +68,78 @@
                            {'absent', rabbit_types:amqqueue(),absent_reason()}).
 -type(not_found_or_absent() ::
         'not_found' | {'absent', rabbit_types:amqqueue(), absent_reason()}).
--spec(recover/0 :: () -> [rabbit_types:amqqueue()]).
--spec(stop/0 :: () -> 'ok').
--spec(start/1 :: ([rabbit_types:amqqueue()]) -> 'ok').
--spec(declare/5 ::
+-spec recover() -> [rabbit_types:amqqueue()].
+-spec stop() -> 'ok'.
+-spec start([rabbit_types:amqqueue()]) -> 'ok'.
+-spec declare
         (name(), boolean(), boolean(),
          rabbit_framing:amqp_table(), rabbit_types:maybe(pid()))
         -> {'new' | 'existing' | 'absent' | 'owner_died',
-            rabbit_types:amqqueue()} | rabbit_types:channel_exit()).
--spec(declare/6 ::
+            rabbit_types:amqqueue()} | rabbit_types:channel_exit().
+-spec declare
         (name(), boolean(), boolean(),
          rabbit_framing:amqp_table(), rabbit_types:maybe(pid()), node())
         -> {'new' | 'existing' | 'owner_died', rabbit_types:amqqueue()} |
            {'absent', rabbit_types:amqqueue(), absent_reason()} |
-           rabbit_types:channel_exit()).
--spec(internal_declare/2 ::
+           rabbit_types:channel_exit().
+-spec internal_declare
         (rabbit_types:amqqueue(), boolean())
-        -> queue_or_absent() | rabbit_misc:thunk(queue_or_absent())).
--spec(update/2 ::
+        -> queue_or_absent() | rabbit_misc:thunk(queue_or_absent()).
+-spec update
         (name(),
          fun((rabbit_types:amqqueue()) -> rabbit_types:amqqueue()))
-         -> 'not_found' | rabbit_types:amqqueue()).
--spec(lookup/1 ::
+         -> 'not_found' | rabbit_types:amqqueue().
+-spec lookup
         (name()) -> rabbit_types:ok(rabbit_types:amqqueue()) |
                     rabbit_types:error('not_found');
-        ([name()]) -> [rabbit_types:amqqueue()]).
--spec(not_found_or_absent/1 :: (name()) -> not_found_or_absent()).
--spec(with/2 :: (name(), qfun(A)) ->
-                     A | rabbit_types:error(not_found_or_absent())).
--spec(with/3 :: (name(), qfun(A), fun((not_found_or_absent()) -> B)) -> A | B).
--spec(with_or_die/2 ::
-        (name(), qfun(A)) -> A | rabbit_types:channel_exit()).
--spec(assert_equivalence/5 ::
+        ([name()]) -> [rabbit_types:amqqueue()].
+-spec not_found_or_absent(name()) -> not_found_or_absent().
+-spec with(name(), qfun(A)) ->
+                     A | rabbit_types:error(not_found_or_absent()).
+-spec with(name(), qfun(A), fun((not_found_or_absent()) -> B)) -> A | B.
+-spec with_or_die
+        (name(), qfun(A)) -> A | rabbit_types:channel_exit().
+-spec assert_equivalence
         (rabbit_types:amqqueue(), boolean(), boolean(),
          rabbit_framing:amqp_table(), rabbit_types:maybe(pid()))
         -> 'ok' | rabbit_types:channel_exit() |
-           rabbit_types:connection_exit()).
--spec(check_exclusive_access/2 ::
+           rabbit_types:connection_exit().
+-spec check_exclusive_access
         (rabbit_types:amqqueue(), pid())
-        -> 'ok' | rabbit_types:channel_exit()).
--spec(with_exclusive_access_or_die/3 ::
-        (name(), pid(), qfun(A)) -> A | rabbit_types:channel_exit()).
--spec(list/0 :: () -> [rabbit_types:amqqueue()]).
--spec(list/1 :: (rabbit_types:vhost()) -> [rabbit_types:amqqueue()]).
--spec(list_down/1 :: (rabbit_types:vhost()) -> [rabbit_types:amqqueue()]).
--spec(info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(info/1 :: (rabbit_types:amqqueue()) -> rabbit_types:infos()).
--spec(info/2 ::
+        -> 'ok' | rabbit_types:channel_exit().
+-spec with_exclusive_access_or_die
+        (name(), pid(), qfun(A)) -> A | rabbit_types:channel_exit().
+-spec list() -> [rabbit_types:amqqueue()].
+-spec list(rabbit_types:vhost()) -> [rabbit_types:amqqueue()].
+-spec list_down(rabbit_types:vhost()) -> [rabbit_types:amqqueue()].
+-spec info_keys() -> rabbit_types:info_keys().
+-spec info(rabbit_types:amqqueue()) -> rabbit_types:infos().
+-spec info
         (rabbit_types:amqqueue(), rabbit_types:info_keys())
-        -> rabbit_types:infos()).
--spec(info_all/1 :: (rabbit_types:vhost()) -> [rabbit_types:infos()]).
--spec(info_all/2 :: (rabbit_types:vhost(), rabbit_types:info_keys())
-                    -> [rabbit_types:infos()]).
--spec(info_all/4 :: (rabbit_types:vhost(), rabbit_types:info_keys(),
-                     reference(), pid()) -> 'ok').
--spec(force_event_refresh/1 :: (reference()) -> 'ok').
--spec(notify_policy_changed/1 :: (rabbit_types:amqqueue()) -> 'ok').
--spec(consumers/1 :: (rabbit_types:amqqueue())
+        -> rabbit_types:infos().
+-spec info_all(rabbit_types:vhost()) -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:vhost(), rabbit_types:info_keys())
+                    -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:vhost(), rabbit_types:info_keys(),
+                     reference(), pid()) -> 'ok'.
+-spec force_event_refresh(reference()) -> 'ok'.
+-spec notify_policy_changed(rabbit_types:amqqueue()) -> 'ok'.
+-spec consumers(rabbit_types:amqqueue())
                      -> [{pid(), rabbit_types:ctag(), boolean(),
-                          non_neg_integer(), rabbit_framing:amqp_table()}]).
--spec(consumer_info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(consumers_all/1 ::
+                          non_neg_integer(), rabbit_framing:amqp_table()}].
+-spec consumer_info_keys() -> rabbit_types:info_keys().
+-spec consumers_all
         (rabbit_types:vhost())
         -> [{name(), pid(), rabbit_types:ctag(), boolean(),
-             non_neg_integer(), rabbit_framing:amqp_table()}]).
--spec(consumers_all/3 ::
+             non_neg_integer(), rabbit_framing:amqp_table()}].
+-spec consumers_all
         (rabbit_types:vhost(), reference(), pid())
-        -> 'ok').
--spec(stat/1 ::
+        -> 'ok'.
+-spec stat
         (rabbit_types:amqqueue())
-        -> {'ok', non_neg_integer(), non_neg_integer()}).
--spec(delete_immediately/1 :: (qpids()) -> 'ok').
--spec(delete/3 ::
+        -> {'ok', non_neg_integer(), non_neg_integer()}.
+-spec delete_immediately(qpids()) -> 'ok'.
+-spec delete
         (rabbit_types:amqqueue(), 'false', 'false')
         -> qlen();
         (rabbit_types:amqqueue(), 'true' , 'false')
@@ -149,57 +149,57 @@
         (rabbit_types:amqqueue(), 'true' , 'true' )
         -> qlen() |
            rabbit_types:error('in_use') |
-           rabbit_types:error('not_empty')).
--spec(delete_crashed/1 :: (rabbit_types:amqqueue()) -> 'ok').
--spec(delete_crashed_internal/1 :: (rabbit_types:amqqueue()) -> 'ok').
--spec(purge/1 :: (rabbit_types:amqqueue()) -> qlen()).
--spec(forget_all_durable/1 :: (node()) -> 'ok').
--spec(deliver/2 :: ([rabbit_types:amqqueue()], rabbit_types:delivery()) ->
-                        qpids()).
--spec(requeue/3 :: (pid(), [msg_id()],  pid()) -> 'ok').
--spec(ack/3 :: (pid(), [msg_id()], pid()) -> 'ok').
--spec(reject/4 :: (pid(), [msg_id()], boolean(), pid()) -> 'ok').
--spec(notify_down_all/2 :: (qpids(), pid()) -> ok_or_errors()).
--spec(notify_down_all/3 :: (qpids(), pid(), non_neg_integer())
-                           -> ok_or_errors()).
--spec(activate_limit_all/2 :: (qpids(), pid()) -> ok_or_errors()).
--spec(basic_get/4 :: (rabbit_types:amqqueue(), pid(), boolean(), pid()) ->
-                          {'ok', non_neg_integer(), qmsg()} | 'empty').
--spec(credit/5 :: (rabbit_types:amqqueue(), pid(), rabbit_types:ctag(),
-                   non_neg_integer(), boolean()) -> 'ok').
--spec(basic_consume/10 ::
+           rabbit_types:error('not_empty').
+-spec delete_crashed(rabbit_types:amqqueue()) -> 'ok'.
+-spec delete_crashed_internal(rabbit_types:amqqueue()) -> 'ok'.
+-spec purge(rabbit_types:amqqueue()) -> qlen().
+-spec forget_all_durable(node()) -> 'ok'.
+-spec deliver([rabbit_types:amqqueue()], rabbit_types:delivery()) ->
+                        qpids().
+-spec requeue(pid(), [msg_id()],  pid()) -> 'ok'.
+-spec ack(pid(), [msg_id()], pid()) -> 'ok'.
+-spec reject(pid(), [msg_id()], boolean(), pid()) -> 'ok'.
+-spec notify_down_all(qpids(), pid()) -> ok_or_errors().
+-spec notify_down_all(qpids(), pid(), non_neg_integer())
+                           -> ok_or_errors().
+-spec activate_limit_all(qpids(), pid()) -> ok_or_errors().
+-spec basic_get(rabbit_types:amqqueue(), pid(), boolean(), pid()) ->
+                          {'ok', non_neg_integer(), qmsg()} | 'empty'.
+-spec credit(rabbit_types:amqqueue(), pid(), rabbit_types:ctag(),
+                   non_neg_integer(), boolean()) -> 'ok'.
+-spec basic_consume
         (rabbit_types:amqqueue(), boolean(), pid(), pid(), boolean(),
          non_neg_integer(), rabbit_types:ctag(), boolean(),
          rabbit_framing:amqp_table(), any())
-        -> rabbit_types:ok_or_error('exclusive_consume_unavailable')).
--spec(basic_cancel/4 ::
-        (rabbit_types:amqqueue(), pid(), rabbit_types:ctag(), any()) -> 'ok').
--spec(notify_decorators/1 :: (rabbit_types:amqqueue()) -> 'ok').
--spec(notify_sent/2 :: (pid(), pid()) -> 'ok').
--spec(notify_sent_queue_down/1 :: (pid()) -> 'ok').
--spec(resume/2 :: (pid(), pid()) -> 'ok').
--spec(internal_delete/1 ::
+        -> rabbit_types:ok_or_error('exclusive_consume_unavailable').
+-spec basic_cancel
+        (rabbit_types:amqqueue(), pid(), rabbit_types:ctag(), any()) -> 'ok'.
+-spec notify_decorators(rabbit_types:amqqueue()) -> 'ok'.
+-spec notify_sent(pid(), pid()) -> 'ok'.
+-spec notify_sent_queue_down(pid()) -> 'ok'.
+-spec resume(pid(), pid()) -> 'ok'.
+-spec internal_delete
         (name()) -> rabbit_types:ok_or_error('not_found') |
                     rabbit_types:connection_exit() |
                     fun (() -> rabbit_types:ok_or_error('not_found') |
-                               rabbit_types:connection_exit())).
--spec(run_backing_queue/3 ::
+                               rabbit_types:connection_exit()).
+-spec run_backing_queue
         (pid(), atom(),
-         (fun ((atom(), A) -> {[rabbit_types:msg_id()], A}))) -> 'ok').
--spec(set_ram_duration_target/2 :: (pid(), number() | 'infinity') -> 'ok').
--spec(set_maximum_since_use/2 :: (pid(), non_neg_integer()) -> 'ok').
--spec(on_node_up/1 :: (node()) -> 'ok').
--spec(on_node_down/1 :: (node()) -> 'ok').
--spec(pseudo_queue/2 :: (name(), pid()) -> rabbit_types:amqqueue()).
--spec(immutable/1 :: (rabbit_types:amqqueue()) -> rabbit_types:amqqueue()).
--spec(store_queue/1 :: (rabbit_types:amqqueue()) -> 'ok').
--spec(update_decorators/1 :: (name()) -> 'ok').
--spec(policy_changed/2 ::
-        (rabbit_types:amqqueue(), rabbit_types:amqqueue()) -> 'ok').
--spec(start_mirroring/1 :: (pid()) -> 'ok').
--spec(stop_mirroring/1 :: (pid()) -> 'ok').
--spec(sync_mirrors/1 :: (pid()) -> 'ok' | rabbit_types:error('not_mirrored')).
--spec(cancel_sync_mirrors/1 :: (pid()) -> 'ok' | {'ok', 'not_syncing'}).
+         (fun ((atom(), A) -> {[rabbit_types:msg_id()], A}))) -> 'ok'.
+-spec set_ram_duration_target(pid(), number() | 'infinity') -> 'ok'.
+-spec set_maximum_since_use(pid(), non_neg_integer()) -> 'ok'.
+-spec on_node_up(node()) -> 'ok'.
+-spec on_node_down(node()) -> 'ok'.
+-spec pseudo_queue(name(), pid()) -> rabbit_types:amqqueue().
+-spec immutable(rabbit_types:amqqueue()) -> rabbit_types:amqqueue().
+-spec store_queue(rabbit_types:amqqueue()) -> 'ok'.
+-spec update_decorators(name()) -> 'ok'.
+-spec policy_changed
+        (rabbit_types:amqqueue(), rabbit_types:amqqueue()) -> 'ok'.
+-spec start_mirroring(pid()) -> 'ok'.
+-spec stop_mirroring(pid()) -> 'ok'.
+-spec sync_mirrors(pid()) -> 'ok' | rabbit_types:error('not_mirrored').
+-spec cancel_sync_mirrors(pid()) -> 'ok' | {'ok', 'not_syncing'}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_auth_backend_dummy.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_auth_backend_dummy.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_auth_backend_dummy.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_auth_backend_dummy.erl	2016-07-23 17:09:22.883356747 +0300
@@ -26,7 +26,7 @@
 
 -ifdef(use_specs).
 
--spec(user/0 :: () -> rabbit_types:user()).
+-spec user() -> rabbit_types:user().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_auth_backend_internal.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_auth_backend_internal.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_auth_backend_internal.erl	2016-04-25 22:23:25.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_auth_backend_internal.erl	2016-07-23 16:46:26.798393950 +0300
@@ -44,42 +44,42 @@
 
 -type(regexp() :: binary()).
 
--spec(add_user/2 :: (rabbit_types:username(), rabbit_types:password()) -> 'ok').
--spec(delete_user/1 :: (rabbit_types:username()) -> 'ok').
--spec(lookup_user/1 :: (rabbit_types:username())
+-spec add_user(rabbit_types:username(), rabbit_types:password()) -> 'ok'.
+-spec delete_user(rabbit_types:username()) -> 'ok'.
+-spec lookup_user(rabbit_types:username())
                        -> rabbit_types:ok(rabbit_types:internal_user())
-                              | rabbit_types:error('not_found')).
--spec(change_password/2 :: (rabbit_types:username(), rabbit_types:password())
-                           -> 'ok').
--spec(clear_password/1 :: (rabbit_types:username()) -> 'ok').
--spec(hash_password/2 :: (module(), rabbit_types:password())
-                         -> rabbit_types:password_hash()).
--spec(change_password_hash/2 :: (rabbit_types:username(),
-                                 rabbit_types:password_hash()) -> 'ok').
--spec(set_tags/2 :: (rabbit_types:username(), [atom()]) -> 'ok').
--spec(set_permissions/5 ::(rabbit_types:username(), rabbit_types:vhost(),
-                           regexp(), regexp(), regexp()) -> 'ok').
--spec(clear_permissions/2 :: (rabbit_types:username(), rabbit_types:vhost())
-                             -> 'ok').
--spec(user_info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(perms_info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(user_perms_info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(vhost_perms_info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(user_vhost_perms_info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(list_users/0 :: () -> [rabbit_types:infos()]).
--spec(list_users/2 :: (reference(), pid()) -> 'ok').
--spec(list_permissions/0 :: () -> [rabbit_types:infos()]).
--spec(list_user_permissions/1 ::
-        (rabbit_types:username()) -> [rabbit_types:infos()]).
--spec(list_user_permissions/3 ::
-        (rabbit_types:username(), reference(), pid()) -> 'ok').
--spec(list_vhost_permissions/1 ::
-        (rabbit_types:vhost()) -> [rabbit_types:infos()]).
--spec(list_vhost_permissions/3 ::
-        (rabbit_types:vhost(), reference(), pid()) -> 'ok').
--spec(list_user_vhost_permissions/2 ::
+                              | rabbit_types:error('not_found').
+-spec change_password(rabbit_types:username(), rabbit_types:password())
+                           -> 'ok'.
+-spec clear_password(rabbit_types:username()) -> 'ok'.
+-spec hash_password(module(), rabbit_types:password())
+                         -> rabbit_types:password_hash().
+-spec change_password_hash(rabbit_types:username(),
+                                 rabbit_types:password_hash()) -> 'ok'.
+-spec set_tags(rabbit_types:username(), [atom()]) -> 'ok'.
+-spec set_permissions(rabbit_types:username(), rabbit_types:vhost(),
+                           regexp(), regexp(), regexp()) -> 'ok'.
+-spec clear_permissions(rabbit_types:username(), rabbit_types:vhost())
+                             -> 'ok'.
+-spec user_info_keys() -> rabbit_types:info_keys().
+-spec perms_info_keys() -> rabbit_types:info_keys().
+-spec user_perms_info_keys() -> rabbit_types:info_keys().
+-spec vhost_perms_info_keys() -> rabbit_types:info_keys().
+-spec user_vhost_perms_info_keys() -> rabbit_types:info_keys().
+-spec list_users() -> [rabbit_types:infos()].
+-spec list_users(reference(), pid()) -> 'ok'.
+-spec list_permissions() -> [rabbit_types:infos()].
+-spec list_user_permissions
+        (rabbit_types:username()) -> [rabbit_types:infos()].
+-spec list_user_permissions
+        (rabbit_types:username(), reference(), pid()) -> 'ok'.
+-spec list_vhost_permissions
+        (rabbit_types:vhost()) -> [rabbit_types:infos()].
+-spec list_vhost_permissions
+        (rabbit_types:vhost(), reference(), pid()) -> 'ok'.
+-spec list_user_vhost_permissions
         (rabbit_types:username(), rabbit_types:vhost())
-        -> [rabbit_types:infos()]).
+        -> [rabbit_types:infos()].
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_backing_queue.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_backing_queue.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_backing_queue.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_backing_queue.erl	2016-07-23 17:05:06.034296952 +0300
@@ -53,7 +53,7 @@
 
 -type(queue_mode() :: atom()).
 
--spec(info_keys/0 :: () -> rabbit_types:info_keys()).
+-spec info_keys() -> rabbit_types:info_keys().
 
 %% Called on startup with a list of durable queue names. The queues
 %% aren't being started at this point, but this call allows the
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_basic.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_basic.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_basic.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_basic.erl	2016-07-23 16:52:41.712021567 +0300
@@ -38,55 +38,55 @@
 -type(exchange_input() :: (rabbit_types:exchange() | rabbit_exchange:name())).
 -type(body_input() :: (binary() | [binary()])).
 
--spec(publish/4 ::
+-spec publish
         (exchange_input(), rabbit_router:routing_key(), properties_input(),
-         body_input()) -> publish_result()).
--spec(publish/5 ::
+         body_input()) -> publish_result().
+-spec publish
         (exchange_input(), rabbit_router:routing_key(), boolean(),
-         properties_input(), body_input()) -> publish_result()).
--spec(publish/1 ::
-        (rabbit_types:delivery()) -> publish_result()).
--spec(delivery/4 ::
+         properties_input(), body_input()) -> publish_result().
+-spec publish
+        (rabbit_types:delivery()) -> publish_result().
+-spec delivery
         (boolean(), boolean(), rabbit_types:message(), undefined | integer()) ->
-                         rabbit_types:delivery()).
--spec(message/4 ::
+                         rabbit_types:delivery().
+-spec message
         (rabbit_exchange:name(), rabbit_router:routing_key(),
-         properties_input(), binary()) -> rabbit_types:message()).
--spec(message/3 ::
+         properties_input(), binary()) -> rabbit_types:message().
+-spec message
         (rabbit_exchange:name(), rabbit_router:routing_key(),
          rabbit_types:decoded_content()) ->
-                        rabbit_types:ok_or_error2(rabbit_types:message(), any())).
--spec(properties/1 ::
-        (properties_input()) -> rabbit_framing:amqp_property_record()).
-
--spec(prepend_table_header/3 ::
-        (binary(), rabbit_framing:amqp_table(), headers()) -> headers()).
-
--spec(header/2 ::
-        (header(), headers()) -> 'undefined' | any()).
--spec(header/3 ::
-        (header(), headers(), any()) -> 'undefined' | any()).
-
--spec(extract_headers/1 :: (rabbit_types:content()) -> headers()).
-
--spec(map_headers/2 :: (fun((headers()) -> headers()), rabbit_types:content())
-                       -> rabbit_types:content()).
-
--spec(header_routes/1 ::
-        (undefined | rabbit_framing:amqp_table()) -> [string()]).
--spec(build_content/2 :: (rabbit_framing:amqp_property_record(),
-                          binary() | [binary()]) -> rabbit_types:content()).
--spec(from_content/1 :: (rabbit_types:content()) ->
-                             {rabbit_framing:amqp_property_record(), binary()}).
--spec(parse_expiration/1 ::
+                        rabbit_types:ok_or_error2(rabbit_types:message(), any()).
+-spec properties
+        (properties_input()) -> rabbit_framing:amqp_property_record().
+
+-spec prepend_table_header
+        (binary(), rabbit_framing:amqp_table(), headers()) -> headers().
+
+-spec header
+        (header(), headers()) -> 'undefined' | any().
+-spec header
+        (header(), headers(), any()) -> 'undefined' | any().
+
+-spec extract_headers(rabbit_types:content()) -> headers().
+
+-spec map_headers(fun((headers()) -> headers()), rabbit_types:content())
+                       -> rabbit_types:content().
+
+-spec header_routes
+        (undefined | rabbit_framing:amqp_table()) -> [string()].
+-spec build_content(rabbit_framing:amqp_property_record(),
+                          binary() | [binary()]) -> rabbit_types:content().
+-spec from_content(rabbit_types:content()) ->
+                             {rabbit_framing:amqp_property_record(), binary()}.
+-spec parse_expiration
         (rabbit_framing:amqp_property_record())
-        -> rabbit_types:ok_or_error2('undefined' | non_neg_integer(), any())).
+        -> rabbit_types:ok_or_error2('undefined' | non_neg_integer(), any()).
 
--spec(msg_size/1 :: (rabbit_types:content() | rabbit_types:message()) ->
-                         non_neg_integer()).
+-spec msg_size(rabbit_types:content() | rabbit_types:message()) ->
+                         non_neg_integer().
 
--spec(maybe_gc_large_msg/1 ::
-        (rabbit_types:content() | rabbit_types:message()) -> non_neg_integer()).
+-spec maybe_gc_large_msg
+        (rabbit_types:content() | rabbit_types:message()) -> non_neg_integer().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_binary_generator.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_binary_generator.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_binary_generator.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_binary_generator.erl	2016-07-23 16:50:35.887482152 +0300
@@ -32,27 +32,27 @@
 
 -type(frame() :: [binary()]).
 
--spec(build_simple_method_frame/3 ::
+-spec build_simple_method_frame
         (rabbit_channel:channel_number(), rabbit_framing:amqp_method_record(),
          rabbit_types:protocol())
-        -> frame()).
--spec(build_simple_content_frames/4 ::
+        -> frame().
+-spec build_simple_content_frames
         (rabbit_channel:channel_number(), rabbit_types:content(),
          non_neg_integer(), rabbit_types:protocol())
-        -> [frame()]).
--spec(build_heartbeat_frame/0 :: () -> frame()).
--spec(generate_table/1 :: (rabbit_framing:amqp_table()) -> binary()).
--spec(check_empty_frame_size/0 :: () -> 'ok').
--spec(ensure_content_encoded/2 ::
+        -> [frame()].
+-spec build_heartbeat_frame() -> frame().
+-spec generate_table(rabbit_framing:amqp_table()) -> binary().
+-spec check_empty_frame_size() -> 'ok'.
+-spec ensure_content_encoded
         (rabbit_types:content(), rabbit_types:protocol()) ->
-                                       rabbit_types:encoded_content()).
--spec(clear_encoded_content/1 ::
-        (rabbit_types:content()) -> rabbit_types:unencoded_content()).
--spec(map_exception/3 :: (rabbit_channel:channel_number(),
+                                       rabbit_types:encoded_content().
+-spec clear_encoded_content
+        (rabbit_types:content()) -> rabbit_types:unencoded_content().
+-spec map_exception(rabbit_channel:channel_number(),
                           rabbit_types:amqp_error() | any(),
                           rabbit_types:protocol()) ->
                               {rabbit_channel:channel_number(),
-                               rabbit_framing:amqp_method_record()}).
+                               rabbit_framing:amqp_method_record()}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_binary_parser.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_binary_parser.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_binary_parser.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_binary_parser.erl	2016-07-23 17:39:36.176719129 +0300
@@ -26,13 +26,13 @@
 
 -ifdef(use_specs).
 
--spec(parse_table/1 :: (binary()) -> rabbit_framing:amqp_table()).
--spec(ensure_content_decoded/1 ::
-        (rabbit_types:content()) -> rabbit_types:decoded_content()).
--spec(clear_decoded_content/1 ::
-        (rabbit_types:content()) -> rabbit_types:undecoded_content()).
--spec(validate_utf8/1 :: (binary()) -> 'ok' | 'error').
--spec(assert_utf8/1 :: (binary()) -> 'ok').
+-spec parse_table(binary()) -> rabbit_framing:amqp_table().
+-spec ensure_content_decoded
+        (rabbit_types:content()) -> rabbit_types:decoded_content().
+-spec clear_decoded_content
+        (rabbit_types:content()) -> rabbit_types:undecoded_content().
+-spec validate_utf8(binary()) -> 'ok' | 'error'.
+-spec assert_utf8(binary()) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_channel.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_channel.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_channel.erl	2016-04-18 02:53:08.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_channel.erl	2016-07-23 17:10:13.698170738 +0300
@@ -190,39 +190,39 @@
 
 -type(channel() :: #ch{}).
 
--spec(start_link/11 ::
+-spec start_link
         (channel_number(), pid(), pid(), pid(), string(),
          rabbit_types:protocol(), rabbit_types:user(), rabbit_types:vhost(),
          rabbit_framing:amqp_table(), pid(), pid()) ->
-                            rabbit_types:ok_pid_or_error()).
--spec(do/2 :: (pid(), rabbit_framing:amqp_method_record()) -> 'ok').
--spec(do/3 :: (pid(), rabbit_framing:amqp_method_record(),
-               rabbit_types:maybe(rabbit_types:content())) -> 'ok').
--spec(do_flow/3 :: (pid(), rabbit_framing:amqp_method_record(),
-                    rabbit_types:maybe(rabbit_types:content())) -> 'ok').
--spec(flush/1 :: (pid()) -> 'ok').
--spec(shutdown/1 :: (pid()) -> 'ok').
--spec(send_command/2 :: (pid(), rabbit_framing:amqp_method_record()) -> 'ok').
--spec(deliver/4 ::
+                            rabbit_types:ok_pid_or_error().
+-spec do(pid(), rabbit_framing:amqp_method_record()) -> 'ok'.
+-spec do(pid(), rabbit_framing:amqp_method_record(),
+               rabbit_types:maybe(rabbit_types:content())) -> 'ok'.
+-spec do_flow(pid(), rabbit_framing:amqp_method_record(),
+                    rabbit_types:maybe(rabbit_types:content())) -> 'ok'.
+-spec flush(pid()) -> 'ok'.
+-spec shutdown(pid()) -> 'ok'.
+-spec send_command(pid(), rabbit_framing:amqp_method_record()) -> 'ok'.
+-spec deliver
         (pid(), rabbit_types:ctag(), boolean(), rabbit_amqqueue:qmsg())
-        -> 'ok').
--spec(deliver_reply/2 :: (binary(), rabbit_types:delivery()) -> 'ok').
--spec(deliver_reply_local/3 ::
-        (pid(), binary(), rabbit_types:delivery()) -> 'ok').
--spec(send_credit_reply/2 :: (pid(), non_neg_integer()) -> 'ok').
--spec(send_drained/2 :: (pid(), [{rabbit_types:ctag(), non_neg_integer()}])
-                        -> 'ok').
--spec(list/0 :: () -> [pid()]).
--spec(list_local/0 :: () -> [pid()]).
--spec(info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(info/1 :: (pid()) -> rabbit_types:infos()).
--spec(info/2 :: (pid(), rabbit_types:info_keys()) -> rabbit_types:infos()).
--spec(info_all/0 :: () -> [rabbit_types:infos()]).
--spec(info_all/1 :: (rabbit_types:info_keys()) -> [rabbit_types:infos()]).
--spec(info_all/3 :: (rabbit_types:info_keys(), reference(), pid()) -> 'ok').
--spec(refresh_config_local/0 :: () -> 'ok').
--spec(ready_for_close/1 :: (pid()) -> 'ok').
--spec(force_event_refresh/1 :: (reference()) -> 'ok').
+        -> 'ok'.
+-spec deliver_reply(binary(), rabbit_types:delivery()) -> 'ok'.
+-spec deliver_reply_local
+        (pid(), binary(), rabbit_types:delivery()) -> 'ok'.
+-spec send_credit_reply(pid(), non_neg_integer()) -> 'ok'.
+-spec send_drained(pid(), [{rabbit_types:ctag(), non_neg_integer()}])
+                        -> 'ok'.
+-spec list() -> [pid()].
+-spec list_local() -> [pid()].
+-spec info_keys() -> rabbit_types:info_keys().
+-spec info(pid()) -> rabbit_types:infos().
+-spec info(pid(), rabbit_types:info_keys()) -> rabbit_types:infos().
+-spec info_all() -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:info_keys()) -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:info_keys(), reference(), pid()) -> 'ok'.
+-spec refresh_config_local() -> 'ok'.
+-spec ready_for_close(pid()) -> 'ok'.
+-spec force_event_refresh(reference()) -> 'ok'.
 
 -endif.
 
@@ -676,12 +676,12 @@
     end.
 
 -ifdef(use_specs).
--spec(precondition_failed/1 :: (string()) -> no_return()).
+-spec precondition_failed(string()) -> no_return().
 -endif.
 precondition_failed(Format) -> precondition_failed(Format, []).
 
 -ifdef(use_specs).
--spec(precondition_failed/2 :: (string(), [any()]) -> no_return()).
+-spec precondition_failed(string(), [any()]) -> no_return().
 -endif.
 precondition_failed(Format, Params) ->
     rabbit_misc:protocol_error(precondition_failed, Format, Params).
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_command_assembler.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_command_assembler.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_command_assembler.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_command_assembler.erl	2016-07-23 17:19:03.931229803 +0300
@@ -48,15 +48,15 @@
         {'content_header', method(), class_id(), protocol()} |
         {'content_body',   method(), body_size(), class_id(), protocol()}).
 
--spec(analyze_frame/3 :: (frame_type(), binary(), protocol()) ->
-                              frame() | 'heartbeat' | 'error').
+-spec analyze_frame(frame_type(), binary(), protocol()) ->
+                              frame() | 'heartbeat' | 'error'.
 
--spec(init/1 :: (protocol()) -> {ok, state()}).
--spec(process/2 :: (frame(), state()) ->
+-spec init(protocol()) -> {ok, state()}.
+-spec process(frame(), state()) ->
                         {ok, state()} |
                         {ok, method(), state()} |
                         {ok, method(), content(), state()} |
-                        {error, rabbit_types:amqp_error()}).
+                        {error, rabbit_types:amqp_error()}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_control_misc.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_control_misc.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_control_misc.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_control_misc.erl	2016-07-23 16:49:21.452754623 +0300
@@ -22,13 +22,13 @@
 
 -ifdef(use_specs).
 
--spec(emitting_map/4 :: (pid(), reference(), fun(), list()) -> 'ok').
--spec(emitting_map/5 :: (pid(), reference(), fun(), list(), atom()) -> 'ok').
--spec(emitting_map_with_exit_handler/4 ::
-        (pid(), reference(), fun(), list()) -> 'ok').
--spec(emitting_map_with_exit_handler/5 ::
-        (pid(), reference(), fun(), list(), atom()) -> 'ok').
--spec(print_cmd_result/2 :: (atom(), term()) -> 'ok').
+-spec emitting_map(pid(), reference(), fun(), list()) -> 'ok'.
+-spec emitting_map(pid(), reference(), fun(), list(), atom()) -> 'ok'.
+-spec emitting_map_with_exit_handler
+        (pid(), reference(), fun(), list()) -> 'ok'.
+-spec emitting_map_with_exit_handler
+        (pid(), reference(), fun(), list(), atom()) -> 'ok'.
+-spec print_cmd_result(atom(), term()) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_event.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_event.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_event.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_event.erl	2016-07-23 16:54:24.196646419 +0300
@@ -50,20 +50,20 @@
 -type(container() :: tuple()).
 -type(pos() :: non_neg_integer()).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(init_stats_timer/2 :: (container(), pos()) -> container()).
--spec(init_disabled_stats_timer/2 :: (container(), pos()) -> container()).
--spec(ensure_stats_timer/3 :: (container(), pos(), term()) -> container()).
--spec(stop_stats_timer/2 :: (container(), pos()) -> container()).
--spec(reset_stats_timer/2 :: (container(), pos()) -> container()).
--spec(stats_level/2 :: (container(), pos()) -> level()).
--spec(if_enabled/3 :: (container(), pos(), timer_fun()) -> 'ok').
--spec(notify/2 :: (event_type(), event_props()) -> 'ok').
--spec(notify/3 :: (event_type(), event_props(), reference() | 'none') -> 'ok').
--spec(notify_if/3 :: (boolean(), event_type(), event_props()) -> 'ok').
--spec(sync_notify/2 :: (event_type(), event_props()) -> 'ok').
--spec(sync_notify/3 :: (event_type(), event_props(),
-                        reference() | 'none') -> 'ok').
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-specinit_stats_timer(container(), pos()) -> container().
+-spec init_disabled_stats_timer(container(), pos()) -> container().
+-spec ensure_stats_timer(container(), pos(), term()) -> container().
+-spec stop_stats_timer(container(), pos()) -> container().
+-spec reset_stats_timer(container(), pos()) -> container().
+-spec stats_level(container(), pos()) -> level().
+-spec if_enabled(container(), pos(), timer_fun()) -> 'ok'.
+-spec notify(event_type(), event_props()) -> 'ok'.
+-spec notify(event_type(), event_props(), reference() | 'none') -> 'ok'.
+-spec notify_if(boolean(), event_type(), event_props()) -> 'ok'.
+-spec sync_notify(event_type(), event_props()) -> 'ok'.
+-spec sync_notify(event_type(), event_props(),
+                        reference() | 'none') -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_health_check.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_health_check.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_health_check.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_health_check.erl	2016-07-23 16:46:52.733299015 +0300
@@ -20,7 +20,7 @@
 -define(NODE_HEALTH_CHECK_TIMEOUT, 70000).
 
 -ifdef(use_specs).
--spec(node/1 :: (node()) -> 'true' | no_return()).
+-spec node(node()) -> 'true' | no_return().
 -endif.
 
 %%----------------------------------------------------------------------------
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_heartbeat.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_heartbeat.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_heartbeat.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_heartbeat.erl	2016-07-23 16:55:33.581392434 +0300
@@ -34,29 +34,29 @@
 
 -type(heartbeat_callback() :: fun (() -> any())).
 
--spec(start/6 ::
+-spec start
         (pid(), rabbit_net:socket(),
          non_neg_integer(), heartbeat_callback(),
-         non_neg_integer(), heartbeat_callback()) -> heartbeaters()).
+         non_neg_integer(), heartbeat_callback()) -> heartbeaters().
 
--spec(start/7 ::
+-spec start
         (pid(), rabbit_net:socket(), rabbit_types:proc_name(),
          non_neg_integer(), heartbeat_callback(),
-         non_neg_integer(), heartbeat_callback()) -> heartbeaters()).
+         non_neg_integer(), heartbeat_callback()) -> heartbeaters().
 
--spec(start_heartbeat_sender/4 ::
+-spec start_heartbeat_sender
         (rabbit_net:socket(), non_neg_integer(), heartbeat_callback(),
-         rabbit_types:proc_type_and_name()) -> rabbit_types:ok(pid())).
--spec(start_heartbeat_receiver/4 ::
+         rabbit_types:proc_type_and_name()) -> rabbit_types:ok(pid()).
+-spec start_heartbeat_receiver
         (rabbit_net:socket(), non_neg_integer(), heartbeat_callback(),
-         rabbit_types:proc_type_and_name()) -> rabbit_types:ok(pid())).
+         rabbit_types:proc_type_and_name()) -> rabbit_types:ok(pid()).
 
--spec(pause_monitor/1 :: (heartbeaters()) -> 'ok').
--spec(resume_monitor/1 :: (heartbeaters()) -> 'ok').
+-spec pause_monitor(heartbeaters()) -> 'ok'.
+-spec resume_monitor(heartbeaters()) -> 'ok'.
 
--spec(system_code_change/4 :: (_,_,_,_) -> {'ok',_}).
--spec(system_continue/3 :: (_,_,{_, _}) -> any()).
--spec(system_terminate/4 :: (_,_,_,_) -> none()).
+-spec system_code_change(_,_,_,_) -> {'ok',_}.
+-spec system_continue(_,_,{_, _}) -> any().
+-spec system_terminate(_,_,_,_) -> none().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_misc.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_misc.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_misc.erl	2016-05-09 15:04:34.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_misc.erl	2016-07-23 17:35:52.407538243 +0300
@@ -101,177 +101,177 @@
         fun (({atom(), [term()]}) -> [{digraph:vertex(), digraph:vertex()}])).
 -type(tref() :: {'erlang', reference()} | {timer, timer:tref()}).
 
--spec(method_record_type/1 :: (rabbit_framing:amqp_method_record())
-                              -> rabbit_framing:amqp_method_name()).
--spec(polite_pause/0 :: () -> 'done').
--spec(polite_pause/1 :: (non_neg_integer()) -> 'done').
--spec(die/1 ::
-        (rabbit_framing:amqp_exception()) -> channel_or_connection_exit()).
+-spec method_record_type(rabbit_framing:amqp_method_record())
+                              -> rabbit_framing:amqp_method_name().
+-spec polite_pause() -> 'done'.
+-spec polite_pause(non_neg_integer()) -> 'done'.
+-spec die
+        (rabbit_framing:amqp_exception()) -> channel_or_connection_exit().
 
--spec(quit/1 :: (integer()) -> no_return()).
+-spec quit(integer()) -> no_return().
 
--spec(frame_error/2 :: (rabbit_framing:amqp_method_name(), binary())
-                       -> rabbit_types:connection_exit()).
--spec(amqp_error/4 ::
+-spec frame_error(rabbit_framing:amqp_method_name(), binary())
+                       -> rabbit_types:connection_exit().
+-spec amqp_error
         (rabbit_framing:amqp_exception(), string(), [any()],
          rabbit_framing:amqp_method_name())
-        -> rabbit_types:amqp_error()).
--spec(protocol_error/3 :: (rabbit_framing:amqp_exception(), string(), [any()])
-                          -> channel_or_connection_exit()).
--spec(protocol_error/4 ::
+        -> rabbit_types:amqp_error().
+-spec protocol_error(rabbit_framing:amqp_exception(), string(), [any()])
+                          -> channel_or_connection_exit().
+-spec protocol_error
         (rabbit_framing:amqp_exception(), string(), [any()],
-         rabbit_framing:amqp_method_name()) -> channel_or_connection_exit()).
--spec(protocol_error/1 ::
-        (rabbit_types:amqp_error()) -> channel_or_connection_exit()).
--spec(not_found/1 :: (rabbit_types:r(atom())) -> rabbit_types:channel_exit()).
--spec(absent/2 :: (rabbit_types:amqqueue(), rabbit_amqqueue:absent_reason())
-                  -> rabbit_types:channel_exit()).
--spec(type_class/1 :: (rabbit_framing:amqp_field_type()) -> atom()).
--spec(assert_args_equivalence/4 :: (rabbit_framing:amqp_table(),
+         rabbit_framing:amqp_method_name()) -> channel_or_connection_exit().
+-spec protocol_error
+        (rabbit_types:amqp_error()) -> channel_or_connection_exit().
+-spec not_found(rabbit_types:r(atom())) -> rabbit_types:channel_exit().
+-spec absent(rabbit_types:amqqueue(), rabbit_amqqueue:absent_reason())
+                  -> rabbit_types:channel_exit().
+-spec type_class(rabbit_framing:amqp_field_type()) -> atom().
+-spec assert_args_equivalence(rabbit_framing:amqp_table(),
                                     rabbit_framing:amqp_table(),
                                     rabbit_types:r(any()), [binary()]) ->
-                                        'ok' | rabbit_types:connection_exit()).
--spec(assert_field_equivalence/4 ::
+                                        'ok' | rabbit_types:connection_exit().
+-spec assert_field_equivalence
         (any(), any(), rabbit_types:r(any()), atom() | binary()) ->
-                                         'ok' | rabbit_types:connection_exit()).
--spec(equivalence_fail/4 ::
+                                         'ok' | rabbit_types:connection_exit().
+-spec equivalence_fail
         (any(), any(), rabbit_types:r(any()), atom() | binary()) ->
-                                 rabbit_types:connection_exit()).
--spec(dirty_read/1 ::
-        ({atom(), any()}) -> rabbit_types:ok_or_error2(any(), 'not_found')).
--spec(table_lookup/2 ::
+                                 rabbit_types:connection_exit().
+-spec dirty_read
+        ({atom(), any()}) -> rabbit_types:ok_or_error2(any(), 'not_found').
+-spec table_lookup
         (rabbit_framing:amqp_table(), binary())
-        -> 'undefined' | {rabbit_framing:amqp_field_type(), any()}).
--spec(set_table_value/4 ::
+        -> 'undefined' | {rabbit_framing:amqp_field_type(), any()}.
+-spec set_table_value
         (rabbit_framing:amqp_table(), binary(),
          rabbit_framing:amqp_field_type(), rabbit_framing:amqp_value())
-        -> rabbit_framing:amqp_table()).
--spec(r/2 :: (rabbit_types:vhost(), K)
+        -> rabbit_framing:amqp_table().
+-spec r(rabbit_types:vhost(), K)
              -> rabbit_types:r3(rabbit_types:vhost(), K, '_')
-                    when is_subtype(K, atom())).
--spec(r/3 ::
+                    when is_subtype(K, atom()).
+-spec r
         (rabbit_types:vhost() | rabbit_types:r(atom()), K, resource_name())
         -> rabbit_types:r3(rabbit_types:vhost(), K, resource_name())
-               when is_subtype(K, atom())).
--spec(r_arg/4 ::
+               when is_subtype(K, atom()).
+-spec r_arg
         (rabbit_types:vhost() | rabbit_types:r(atom()), K,
          rabbit_framing:amqp_table(), binary()) ->
                       undefined |
                       rabbit_types:error(
                         {invalid_type, rabbit_framing:amqp_field_type()}) |
-                      rabbit_types:r(K) when is_subtype(K, atom())).
--spec(rs/1 :: (rabbit_types:r(atom())) -> string()).
--spec(enable_cover/0 :: () -> ok_or_error()).
--spec(start_cover/1 :: ([{string(), string()} | string()]) -> 'ok').
--spec(report_cover/0 :: () -> 'ok').
--spec(enable_cover/1 :: ([file:filename() | atom()]) -> ok_or_error()).
--spec(report_cover/1 :: ([file:filename() | atom()]) -> 'ok').
--spec(throw_on_error/2 ::
-        (atom(), thunk(rabbit_types:error(any()) | {ok, A} | A)) -> A).
--spec(with_exit_handler/2 :: (thunk(A), thunk(A)) -> A).
--spec(is_abnormal_exit/1 :: (any()) -> boolean()).
--spec(filter_exit_map/2 :: (fun ((A) -> B), [A]) -> [B]).
--spec(with_user/2 :: (rabbit_types:username(), thunk(A)) -> A).
--spec(with_user_and_vhost/3 ::
+                      rabbit_types:r(K) when is_subtype(K, atom()).
+-spec rs(rabbit_types:r(atom())) -> string().
+-spec enable_cover() -> ok_or_error().
+-spec start_cover([{string(), string()} | string()]) -> 'ok'.
+-spec report_cover() -> 'ok'.
+-spec enable_cover([file:filename() | atom()]) -> ok_or_error().
+-spec report_cover([file:filename() | atom()]) -> 'ok'.
+-spec throw_on_error
+        (atom(), thunk(rabbit_types:error(any()) | {ok, A} | A)) -> A.
+-spec with_exit_handler(thunk(A), thunk(A)) -> A.
+-spec is_abnormal_exit(any()) -> boolean().
+-spec filter_exit_map(fun ((A) -> B), [A]) -> [B].
+-spec with_user(rabbit_types:username(), thunk(A)) -> A.
+-spec with_user_and_vhost
         (rabbit_types:username(), rabbit_types:vhost(), thunk(A))
-        -> A).
--spec(execute_mnesia_transaction/1 :: (thunk(A)) -> A).
--spec(execute_mnesia_transaction/2 ::
-        (thunk(A), fun ((A, boolean()) -> B)) -> B).
--spec(execute_mnesia_tx_with_tail/1 ::
-        (thunk(fun ((boolean()) -> B))) -> B | (fun ((boolean()) -> B))).
--spec(ensure_ok/2 :: (ok_or_error(), atom()) -> 'ok').
--spec(tcp_name/3 ::
+        -> A.
+-spec execute_mnesia_transaction(thunk(A)) -> A.
+-spec execute_mnesia_transaction
+        (thunk(A), fun ((A, boolean()) -> B)) -> B.
+-spec execute_mnesia_tx_with_tail
+        (thunk(fun ((boolean()) -> B))) -> B | (fun ((boolean()) -> B)).
+-spec ensure_ok(ok_or_error(), atom()) -> 'ok'.
+-spec tcp_name
         (atom(), inet:ip_address(), rabbit_networking:ip_port())
-        -> atom()).
--spec(format_inet_error/1 :: (atom()) -> string()).
--spec(upmap/2 :: (fun ((A) -> B), [A]) -> [B]).
--spec(map_in_order/2 :: (fun ((A) -> B), [A]) -> [B]).
--spec(table_filter/3:: (fun ((A) -> boolean()), fun ((A, boolean()) -> 'ok'),
-                                                    atom()) -> [A]).
--spec(dirty_read_all/1 :: (atom()) -> [any()]).
--spec(dirty_foreach_key/2 :: (fun ((any()) -> any()), atom())
-                             -> 'ok' | 'aborted').
--spec(dirty_dump_log/1 :: (file:filename()) -> ok_or_error()).
--spec(format/2 :: (string(), [any()]) -> string()).
--spec(format_many/1 :: ([{string(), [any()]}]) -> string()).
--spec(format_stderr/2 :: (string(), [any()]) -> 'ok').
--spec(unfold/2  :: (fun ((A) -> ({'true', B, A} | 'false')), A) -> {[B], A}).
--spec(ceil/1 :: (number()) -> integer()).
--spec(queue_fold/3 :: (fun ((any(), B) -> B), B, queue:queue()) -> B).
--spec(sort_field_table/1 ::
-        (rabbit_framing:amqp_table()) -> rabbit_framing:amqp_table()).
--spec(pid_to_string/1 :: (pid()) -> string()).
--spec(string_to_pid/1 :: (string()) -> pid()).
--spec(pid_change_node/2 :: (pid(), node()) -> pid()).
--spec(node_to_fake_pid/1 :: (atom()) -> pid()).
--spec(version_compare/2 :: (string(), string()) -> 'lt' | 'eq' | 'gt').
--spec(version_compare/3 ::
+        -> atom().
+-spec format_inet_error(atom()) -> string().
+-spec upmap(fun ((A) -> B), [A]) -> [B].
+-spec map_in_order(fun ((A) -> B), [A]) -> [B].
+-spec table_filter(fun ((A) -> boolean()), fun ((A, boolean()) -> 'ok'),
+                                                    atom()) -> [A].
+-spec dirty_read_all(atom()) -> [any()].
+-spec dirty_foreach_key(fun ((any()) -> any()), atom())
+                             -> 'ok' | 'aborted'.
+-spec dirty_dump_log(file:filename()) -> ok_or_error().
+-spec format(string(), [any()]) -> string().
+-spec format_many([{string(), [any()]}]) -> string().
+-spec format_stderr(string(), [any()]) -> 'ok'.
+-spec unfold(fun ((A) -> ({'true', B, A} | 'false')), A) -> {[B], A}.
+-spec ceil(number()) -> integer().
+-spec queue_fold(fun ((any(), B) -> B), B, queue:queue()) -> B.
+-spec sort_field_table
+        (rabbit_framing:amqp_table()) -> rabbit_framing:amqp_table().
+-spec pid_to_string(pid()) -> string().
+-spec string_to_pid(string()) -> pid().
+-spec pid_change_node(pid(), node()) -> pid().
+-spec node_to_fake_pid(atom()) -> pid().
+-spec version_compare(string(), string()) -> 'lt' | 'eq' | 'gt'.
+-spec version_compare
         (string(), string(), ('lt' | 'lte' | 'eq' | 'gte' | 'gt'))
-        -> boolean()).
--spec(version_minor_equivalent/2 :: (string(), string()) -> boolean()).
--spec(dict_cons/3 :: (any(), any(), dict:dict()) -> dict:dict()).
--spec(orddict_cons/3 :: (any(), any(), orddict:orddict()) -> orddict:orddict()).
--spec(gb_trees_cons/3 :: (any(), any(), gb_trees:tree()) -> gb_trees:tree()).
--spec(gb_trees_fold/3 :: (fun ((any(), any(), A) -> A), A, gb_trees:tree())
- -> A).
--spec(gb_trees_foreach/2 ::
-        (fun ((any(), any()) -> any()), gb_trees:tree()) -> 'ok').
--spec(all_module_attributes/1 ::
-        (atom()) -> [{atom(), atom(), [term()]}]).
--spec(build_acyclic_graph/3 ::
+        -> boolean().
+-spec version_minor_equivalent(string(), string()) -> boolean().
+-spec dict_cons(any(), any(), dict:dict()) -> dict:dict().
+-spec orddict_cons(any(), any(), orddict:orddict()) -> orddict:orddict().
+-spec gb_trees_cons(any(), any(), gb_trees:tree()) -> gb_trees:tree().
+-spec gb_trees_fold(fun ((any(), any(), A) -> A), A, gb_trees:tree())
+ -> A.
+-spec gb_trees_foreach
+        (fun ((any(), any()) -> any()), gb_trees:tree()) -> 'ok'.
+-spec all_module_attributes
+        (atom()) -> [{atom(), atom(), [term()]}].
+-spec build_acyclic_graph
         (graph_vertex_fun(), graph_edge_fun(), [{atom(), [term()]}])
         -> rabbit_types:ok_or_error2(digraph:graph(),
                                      {'vertex', 'duplicate', digraph:vertex()} |
                                      {'edge', ({bad_vertex, digraph:vertex()} |
                                                {bad_edge, [digraph:vertex()]}),
-                                      digraph:vertex(), digraph:vertex()})).
--spec(const/1 :: (A) -> thunk(A)).
--spec(ntoa/1 :: (inet:ip_address()) -> string()).
--spec(ntoab/1 :: (inet:ip_address()) -> string()).
--spec(is_process_alive/1 :: (pid()) -> boolean()).
--spec(pget/2 :: (term(), [term()]) -> term()).
--spec(pget/3 :: (term(), [term()], term()) -> term()).
--spec(pget_or_die/2 :: (term(), [term()]) -> term() | no_return()).
--spec(pmerge/3 :: (term(), term(), [term()]) -> [term()]).
--spec(plmerge/2 :: ([term()], [term()]) -> [term()]).
--spec(pset/3 :: (term(), term(), [term()]) -> [term()]).
--spec(format_message_queue/2 :: (any(), priority_queue:q()) -> term()).
--spec(append_rpc_all_nodes/4 :: ([node()], atom(), atom(), [any()]) -> [any()]).
--spec(os_cmd/1 :: (string()) -> string()).
--spec(is_os_process_alive/1 :: (non_neg_integer()) -> boolean()).
--spec(gb_sets_difference/2 :: (gb_sets:set(), gb_sets:set()) -> gb_sets:set()).
--spec(version/0 :: () -> string()).
--spec(otp_release/0 :: () -> string()).
--spec(which_applications/0 :: () -> [{atom(), string(), string()}]).
--spec(sequence_error/1 :: ([({'error', any()} | any())])
-                       -> {'error', any()} | any()).
--spec(json_encode/1 :: (any()) -> {'ok', string()} | {'error', any()}).
--spec(json_decode/1 :: (string()) -> {'ok', any()} | 'error').
--spec(json_to_term/1 :: (any()) -> any()).
--spec(term_to_json/1 :: (any()) -> any()).
--spec(check_expiry/1 :: (integer()) -> rabbit_types:ok_or_error(any())).
--spec(base64url/1 :: (binary()) -> string()).
--spec(interval_operation/5 ::
+                                      digraph:vertex(), digraph:vertex()}).
+-spec const(A) -> thunk(A).
+-spec ntoa(inet:ip_address()) -> string().
+-spec ntoab(inet:ip_address()) -> string().
+-spec is_process_alive(pid()) -> boolean().
+-spec pget(term(), [term()]) -> term().
+-spec pget(term(), [term()], term()) -> term().
+-spec pget_or_die(term(), [term()]) -> term() | no_return().
+-spec pmerge(term(), term(), [term()]) -> [term()].
+-spec plmerge([term()], [term()]) -> [term()].
+-spec pset(term(), term(), [term()]) -> [term()].
+-spec format_message_queue(any(), priority_queue:q()) -> term().
+-spec append_rpc_all_nodes([node()], atom(), atom(), [any()]) -> [any()].
+-spec os_cmd(string()) -> string().
+-spec is_os_process_alive(non_neg_integer()) -> boolean().
+-spec gb_sets_difference(gb_sets:set(), gb_sets:set()) -> gb_sets:set().
+-spec version() -> string().
+-spec otp_release() -> string().
+-spec which_applications() -> [{atom(), string(), string()}].
+-spec sequence_error([({'error', any()} | any())])
+                       -> {'error', any()} | any().
+-spec json_encode(any()) -> {'ok', string()} | {'error', any()}.
+-spec json_decode(string()) -> {'ok', any()} | 'error'.
+-spec json_to_term(any()) -> any().
+-spec term_to_json(any()) -> any().
+-spec check_expiry(integer()) -> rabbit_types:ok_or_error(any()).
+-spec base64url(binary()) -> string().
+-spec interval_operation
         ({atom(), atom(), any()}, float(), non_neg_integer(), non_neg_integer(), non_neg_integer())
-        -> {any(), non_neg_integer()}).
--spec(ensure_timer/4 :: (A, non_neg_integer(), non_neg_integer(), any()) -> A).
--spec(stop_timer/2 :: (A, non_neg_integer()) -> A).
--spec(send_after/3 :: (non_neg_integer(), pid(), any()) -> tref()).
--spec(cancel_timer/1 :: (tref()) -> 'ok').
--spec(get_parent/0 :: () -> pid()).
--spec(store_proc_name/2 :: (atom(), rabbit_types:proc_name()) -> ok).
--spec(store_proc_name/1 :: (rabbit_types:proc_type_and_name()) -> ok).
--spec(moving_average/4 :: (float(), float(), float(), float() | 'undefined')
-                          -> float()).
--spec(get_env/3 :: (atom(), atom(), term())  -> term()).
--spec(get_channel_operation_timeout/0 :: () -> non_neg_integer()).
--spec(random/1 :: (non_neg_integer()) -> non_neg_integer()).
--spec(rpc_call/4 :: (node(), atom(), atom(), [any()]) -> any()).
--spec(rpc_call/5 :: (node(), atom(), atom(), [any()], number()) -> any()).
--spec(rpc_call/7 :: (node(), atom(), atom(), [any()], reference(), pid(),
-                     number()) -> any()).
--spec(report_default_thread_pool_size/0 :: () -> 'ok').
+        -> {any(), non_neg_integer()}.
+-spec ensure_timer(A, non_neg_integer(), non_neg_integer(), any()) -> A.
+-spec stop_timer(A, non_neg_integer()) -> A.
+-spec send_after(non_neg_integer(), pid(), any()) -> tref().
+-spec cancel_timer(tref()) -> 'ok'.
+-spec get_parent() -> pid().
+-spec store_proc_name(atom(), rabbit_types:proc_name()) -> ok.
+-spec store_proc_name(rabbit_types:proc_type_and_name()) -> ok.
+-spec moving_average(float(), float(), float(), float() | 'undefined')
+                          -> float().
+-spec get_env(atom(), atom(), term())  -> term().
+-spec get_channel_operation_timeout() -> non_neg_integer().
+-spec random(non_neg_integer()) -> non_neg_integer().
+-spec rpc_call(node(), atom(), atom(), [any()]) -> any().
+-spec rpc_call(node(), atom(), atom(), [any()], number()) -> any().
+-spec rpc_call(node(), atom(), atom(), [any()], reference(), pid(),
+                     number()) -> any().
+-spec report_default_thread_pool_size() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_net.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_net.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_net.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_net.erl	2016-07-23 17:02:22.634895080 +0300
@@ -47,48 +47,48 @@
 -type(opts() :: [{atom(), any()} |
                  {raw, non_neg_integer(), non_neg_integer(), binary()}]).
 -type(host_or_ip() :: binary() | inet:ip_address()).
--spec(is_ssl/1 :: (socket()) -> boolean()).
--spec(ssl_info/1 :: (socket())
+-spec is_ssl(socket()) -> boolean().
+-spec ssl_info(socket())
                     -> 'nossl' | ok_val_or_error(
-                                   [{atom(), any()}])).
--spec(controlling_process/2 :: (socket(), pid()) -> ok_or_any_error()).
--spec(getstat/2 ::
+                                   [{atom(), any()}]).
+-spec controlling_process(socket(), pid()) -> ok_or_any_error().
+-spec getstat
         (socket(), [stat_option()])
-        -> ok_val_or_error([{stat_option(), integer()}])).
--spec(recv/1 :: (socket()) ->
+        -> ok_val_or_error([{stat_option(), integer()}]).
+-spec recv(socket()) ->
                      {'data', [char()] | binary()} | 'closed' |
-                     rabbit_types:error(any()) | {'other', any()}).
--spec(sync_recv/2 :: (socket(), integer()) -> rabbit_types:ok(binary()) |
-                                              rabbit_types:error(any())).
--spec(async_recv/3 ::
-        (socket(), integer(), timeout()) -> rabbit_types:ok(any())).
--spec(port_command/2 :: (socket(), iolist()) -> 'true').
--spec(getopts/2 :: (socket(), [atom() | {raw,
+                     rabbit_types:error(any()) | {'other', any()}.
+-spec sync_recv(socket(), integer()) -> rabbit_types:ok(binary()) |
+                                              rabbit_types:error(any()).
+-spec async_recv
+        (socket(), integer(), timeout()) -> rabbit_types:ok(any()).
+-spec port_command(socket(), iolist()) -> 'true'.
+-spec getopts(socket(), [atom() | {raw,
                                          non_neg_integer(),
                                          non_neg_integer(),
                                          non_neg_integer() | binary()}])
-                   -> ok_val_or_error(opts())).
--spec(setopts/2 :: (socket(), opts()) -> ok_or_any_error()).
--spec(send/2 :: (socket(), binary() | iolist()) -> ok_or_any_error()).
--spec(close/1 :: (socket()) -> ok_or_any_error()).
--spec(fast_close/1 :: (socket()) -> ok_or_any_error()).
--spec(sockname/1 ::
+                   -> ok_val_or_error(opts()).
+-spec setopts(socket(), opts()) -> ok_or_any_error().
+-spec send(socket(), binary() | iolist()) -> ok_or_any_error().
+-spec close(socket()) -> ok_or_any_error().
+-spec fast_close(socket()) -> ok_or_any_error().
+-spec sockname
         (socket())
-        -> ok_val_or_error({inet:ip_address(), rabbit_networking:ip_port()})).
--spec(peername/1 ::
+        -> ok_val_or_error({inet:ip_address(), rabbit_networking:ip_port()}).
+-spec peername
         (socket())
-        -> ok_val_or_error({inet:ip_address(), rabbit_networking:ip_port()})).
--spec(peercert/1 ::
+        -> ok_val_or_error({inet:ip_address(), rabbit_networking:ip_port()}).
+-spec peercert
         (socket())
-        -> 'nossl' | ok_val_or_error(rabbit_ssl:certificate())).
--spec(connection_string/2 ::
-        (socket(), 'inbound' | 'outbound') -> ok_val_or_error(string())).
--spec(socket_ends/2 ::
+        -> 'nossl' | ok_val_or_error(rabbit_ssl:certificate()).
+-spec connection_string
+        (socket(), 'inbound' | 'outbound') -> ok_val_or_error(string()).
+-spec socket_ends
         (socket(), 'inbound' | 'outbound')
         -> ok_val_or_error({host_or_ip(), rabbit_networking:ip_port(),
-                            host_or_ip(), rabbit_networking:ip_port()})).
--spec(is_loopback/1 :: (socket() | inet:ip_address()) -> boolean()).
--spec(accept_ack/2 :: (any(), socket()) -> ok).
+                            host_or_ip(), rabbit_networking:ip_port()}).
+-spec is_loopback(socket() | inet:ip_address()) -> boolean().
+-spec accept_ack(any(), socket()) -> ok.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_networking.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_networking.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_networking.erl	2016-04-18 02:53:08.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_networking.erl	2016-07-23 16:59:32.510517826 +0300
@@ -74,54 +74,54 @@
 -type(protocol() :: atom()).
 -type(label() :: string()).
 
--spec(start_tcp_listener/2 :: (listener_config(), integer()) -> 'ok').
--spec(start_ssl_listener/3 ::
-        (listener_config(), rabbit_types:infos(), integer()) -> 'ok').
--spec(stop_tcp_listener/1 :: (listener_config()) -> 'ok').
--spec(active_listeners/0 :: () -> [rabbit_types:listener()]).
--spec(node_listeners/1 :: (node()) -> [rabbit_types:listener()]).
--spec(register_connection/1 :: (pid()) -> ok).
--spec(unregister_connection/1 :: (pid()) -> ok).
--spec(connections/0 :: () -> [rabbit_types:connection()]).
--spec(connections_local/0 :: () -> [rabbit_types:connection()]).
--spec(connection_info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(connection_info/1 ::
-        (rabbit_types:connection()) -> rabbit_types:infos()).
--spec(connection_info/2 ::
+-spec start_tcp_listener(listener_config(), integer()) -> 'ok'.
+-spec start_ssl_listener
+        (listener_config(), rabbit_types:infos(), integer()) -> 'ok'.
+-spec stop_tcp_listener(listener_config()) -> 'ok'.
+-spec active_listeners() -> [rabbit_types:listener()].
+-spec node_listeners(node()) -> [rabbit_types:listener()].
+-spec register_connection(pid()) -> ok.
+-spec unregister_connection(pid()) -> ok.
+-spec connections() -> [rabbit_types:connection()].
+-spec connections_local() -> [rabbit_types:connection()].
+-spec connection_info_keys() -> rabbit_types:info_keys().
+-spec connection_info
+        (rabbit_types:connection()) -> rabbit_types:infos().
+-spec connection_info
         (rabbit_types:connection(), rabbit_types:info_keys())
-        -> rabbit_types:infos()).
--spec(connection_info_all/0 :: () -> [rabbit_types:infos()]).
--spec(connection_info_all/1 ::
-        (rabbit_types:info_keys()) -> [rabbit_types:infos()]).
--spec(connection_info_all/3 ::
-        (rabbit_types:info_keys(), reference(), pid()) -> 'ok').
--spec(close_connection/2 :: (pid(), string()) -> 'ok').
--spec(force_connection_event_refresh/1 :: (reference()) -> 'ok').
+        -> rabbit_types:infos().
+-spec connection_info_all() -> [rabbit_types:infos()].
+-spec connection_info_all
+        (rabbit_types:info_keys()) -> [rabbit_types:infos()].
+-spec connection_info_all
+        (rabbit_types:info_keys(), reference(), pid()) -> 'ok'.
+-spec close_connection(pid(), string()) -> 'ok'.
+-spec force_connection_event_refresh(reference()) -> 'ok'.
 
--spec(on_node_down/1 :: (node()) -> 'ok').
--spec(tcp_listener_addresses/1 :: (listener_config()) -> [address()]).
--spec(tcp_listener_spec/9 ::
+-spec on_node_down(node()) -> 'ok'.
+-spec tcp_listener_addresses(listener_config()) -> [address()].
+-spec tcp_listener_spec
         (name_prefix(), address(), [gen_tcp:listen_option()], module(), module(), protocol(), any(),
-         non_neg_integer(), label()) -> supervisor:child_spec()).
--spec(ensure_ssl/0 :: () -> rabbit_types:infos()).
--spec(fix_ssl_options/1 :: (rabbit_types:infos()) -> rabbit_types:infos()).
--spec(poodle_check/1 :: (atom()) -> 'ok' | 'danger').
+         non_neg_integer(), label()) -> supervisor:child_spec().
+-spec ensure_ssl() -> rabbit_types:infos().
+-spec fix_ssl_options(rabbit_types:infos()) -> rabbit_types:infos().
+-spec poodle_check(atom()) -> 'ok' | 'danger'.
 
--spec(boot/0 :: () -> 'ok').
--spec(tcp_listener_started/3 ::
+-spec boot() -> 'ok'.
+-spec tcp_listener_started
 	(_,
          string() |
 	 {byte(),byte(),byte(),byte()} |
 	 {char(),char(),char(),char(),char(),char(),char(),char()},
 	 _) ->
-				     'ok').
--spec(tcp_listener_stopped/3 ::
+				     'ok'.
+-spec tcp_listener_stopped
 	(_,
          string() |
 	 {byte(),byte(),byte(),byte()} |
 	 {char(),char(),char(),char(),char(),char(),char(),char()},
 	 _) ->
-				     'ok').
+				     'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_nodes.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_nodes.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_nodes.erl	2016-04-11 17:14:51.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_nodes.erl	2016-07-23 17:06:19.394028416 +0300
@@ -33,18 +33,18 @@
 
 -ifdef(use_specs).
 
--spec(names/1 :: (string()) -> rabbit_types:ok_or_error2(
-                                 [{string(), integer()}], term())).
--spec(diagnostics/1 :: ([node()]) -> string()).
--spec(make/1 :: ({string(), string()} | string()) -> node()).
--spec(parts/1 :: (node() | string()) -> {string(), string()}).
--spec(cookie_hash/0 :: () -> string()).
--spec(is_running/2 :: (node(), atom()) -> boolean()).
--spec(is_process_running/2 :: (node(), atom()) -> boolean()).
--spec(cluster_name/0 :: () -> binary()).
--spec(set_cluster_name/1 :: (binary()) -> 'ok').
--spec(ensure_epmd/0 :: () -> 'ok').
--spec(all_running/0 :: () -> [node()]).
+-spec names(string()) -> rabbit_types:ok_or_error2(
+                                 [{string(), integer()}], term()).
+-spec diagnostics([node()]) -> string().
+-spec make({string(), string()} | string()) -> node().
+-spec parts(node() | string()) -> {string(), string()}.
+-spec cookie_hash() -> string().
+-spec is_running(node(), atom()) -> boolean().
+-spec is_process_running(node(), atom()) -> boolean().
+-spec cluster_name() -> binary().
+-spec set_cluster_name(binary()) -> 'ok'.
+-spec ensure_epmd() -> 'ok'.
+-spec all_running() -> [node()].
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_queue_collector.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_queue_collector.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_queue_collector.erl	2016-04-18 02:53:08.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_queue_collector.erl	2016-07-23 16:56:07.846267006 +0300
@@ -34,10 +34,10 @@
 
 -ifdef(use_specs).
 
--spec(start_link/1 :: (rabbit_types:proc_name()) ->
-                           rabbit_types:ok_pid_or_error()).
--spec(register/2 :: (pid(), pid()) -> 'ok').
--spec(delete_all/1 :: (pid()) -> 'ok').
+-spec start_link(rabbit_types:proc_name()) ->
+                           rabbit_types:ok_pid_or_error().
+-spec register(pid(), pid()) -> 'ok'.
+-spec delete_all(pid()) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_reader.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_reader.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_reader.erl	2016-04-18 02:53:08.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_reader.erl	2016-07-23 17:37:00.572288724 +0300
@@ -182,29 +182,29 @@
 
 -ifdef(use_specs).
 
--spec(start_link/3 :: (pid(), any(), rabbit_net:socket()) -> rabbit_types:ok(pid())).
--spec(info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(info/1 :: (pid()) -> rabbit_types:infos()).
--spec(info/2 :: (pid(), rabbit_types:info_keys()) -> rabbit_types:infos()).
--spec(force_event_refresh/2 :: (pid(), reference()) -> 'ok').
--spec(shutdown/2 :: (pid(), string()) -> 'ok').
+-spec start_link(pid(), any(), rabbit_net:socket()) -> rabbit_types:ok(pid()).
+-spec info_keys() -> rabbit_types:info_keys().
+-spec info(pid()) -> rabbit_types:infos().
+-spec info(pid(), rabbit_types:info_keys()) -> rabbit_types:infos().
+-spec force_event_refresh(pid(), reference()) -> 'ok'.
+-spec shutdown(pid(), string()) -> 'ok'.
 -type(resource_alert() :: {WasAlarmSetForNode :: boolean(),
                            IsThereAnyAlarmsWithSameSourceInTheCluster :: boolean(),
                            NodeForWhichAlarmWasSetOrCleared :: node()}).
--spec(conserve_resources/3 :: (pid(), atom(), resource_alert()) -> 'ok').
--spec(server_properties/1 :: (rabbit_types:protocol()) ->
-                                  rabbit_framing:amqp_table()).
+-spec conserve_resources(pid(), atom(), resource_alert()) -> 'ok'.
+-spec server_properties(rabbit_types:protocol()) ->
+                                  rabbit_framing:amqp_table().
 
 %% These specs only exists to add no_return() to keep dialyzer happy
--spec(init/4 :: (pid(), pid(), any(), rabbit_net:socket()) -> no_return()).
--spec(start_connection/4 ::
-        (pid(), pid(), any(), rabbit_net:socket()) -> no_return()).
-
--spec(mainloop/4 :: (_,[binary()], non_neg_integer(), #v1{}) -> any()).
--spec(system_code_change/4 :: (_,_,_,_) -> {'ok',_}).
--spec(system_continue/3 :: (_,_,{[binary()], non_neg_integer(), #v1{}}) ->
-                                any()).
--spec(system_terminate/4 :: (_,_,_,_) -> none()).
+-spec init(pid(), pid(), any(), rabbit_net:socket()) -> no_return().
+-spec start_connection
+        (pid(), pid(), any(), rabbit_net:socket()) -> no_return().
+
+-spec mainloop(_,[binary()], non_neg_integer(), #v1{}) -> any().
+-spec system_code_change(_,_,_,_) -> {'ok',_}.
+-spec system_continue(_,_,{[binary()], non_neg_integer(), #v1{}}) ->
+                                any().
+-spec system_terminate(_,_,_,_) -> none().
 
 -endif.
 
@@ -1103,7 +1103,7 @@
     throw(Exception).
 
 -ifdef(use_specs).
--spec(refuse_connection/2 :: (rabbit_net:socket(), any()) -> no_return()).
+-spec refuse_connection(rabbit_net:socket(), any()) -> no_return().
 -endif.
 refuse_connection(Sock, Exception) ->
     refuse_connection(Sock, Exception, {0, 0, 9, 1}).
@@ -1335,9 +1335,9 @@
     end.
 
 -ifdef(use_specs).
--spec(auth_fail/5 ::
+-spec auth_fail
         (rabbit_types:username() | none, string(), [any()], binary(), #v1{}) ->
-           no_return()).
+           no_return().
 -endif.
 auth_fail(Username, Msg, Args, AuthName,
           State = #v1{connection = #connection{protocol     = Protocol,
@@ -1469,7 +1469,7 @@
 
 %% 1.0 stub
 -ifdef(use_specs).
--spec(become_1_0/2 :: (non_neg_integer(), #v1{}) -> no_return()).
+-spec become_1_0(non_neg_integer(), #v1{}) -> no_return().
 -endif.
 become_1_0(Id, State = #v1{sock = Sock}) ->
     case code:is_loaded(rabbit_amqp1_0_reader) of
diff -urN rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_writer.erl rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_writer.erl
--- rabbitmq-server-3.6.2/deps/rabbit_common/src/rabbit_writer.erl	2016-03-31 17:17:07.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbit_common/src/rabbit_writer.erl	2016-07-23 17:04:28.029436070 +0300
@@ -74,63 +74,63 @@
 
 -ifdef(use_specs).
 
--spec(start/6 ::
+-spec start
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          non_neg_integer(), rabbit_types:protocol(), pid(),
          rabbit_types:proc_name())
-        -> rabbit_types:ok(pid())).
--spec(start_link/6 ::
+        -> rabbit_types:ok(pid()).
+-spec start_link
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          non_neg_integer(), rabbit_types:protocol(), pid(),
          rabbit_types:proc_name())
-        -> rabbit_types:ok(pid())).
--spec(start/7 ::
+        -> rabbit_types:ok(pid()).
+-spec start
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          non_neg_integer(), rabbit_types:protocol(), pid(),
          rabbit_types:proc_name(), boolean())
-        -> rabbit_types:ok(pid())).
--spec(start_link/7 ::
+        -> rabbit_types:ok(pid()).
+-spec start_link
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          non_neg_integer(), rabbit_types:protocol(), pid(),
          rabbit_types:proc_name(), boolean())
-        -> rabbit_types:ok(pid())).
+        -> rabbit_types:ok(pid()).
 
--spec(system_code_change/4 :: (_,_,_,_) -> {'ok',_}).
--spec(system_continue/3 :: (_,_,#wstate{}) -> any()).
--spec(system_terminate/4 :: (_,_,_,_) -> none()).
-
--spec(send_command/2 ::
-        (pid(), rabbit_framing:amqp_method_record()) -> 'ok').
--spec(send_command/3 ::
+-spec system_code_change(_,_,_,_) -> {'ok',_}.
+-spec system_continue(_,_,#wstate{}) -> any().
+-spec system_terminate(_,_,_,_) -> none().
+
+-spec send_command
+        (pid(), rabbit_framing:amqp_method_record()) -> 'ok'.
+-spec send_command
         (pid(), rabbit_framing:amqp_method_record(), rabbit_types:content())
-        -> 'ok').
--spec(send_command_sync/2 ::
-        (pid(), rabbit_framing:amqp_method_record()) -> 'ok').
--spec(send_command_sync/3 ::
+        -> 'ok'.
+-spec send_command_sync
+        (pid(), rabbit_framing:amqp_method_record()) -> 'ok'.
+-spec send_command_sync
         (pid(), rabbit_framing:amqp_method_record(), rabbit_types:content())
-        -> 'ok').
--spec(send_command_and_notify/4 ::
+        -> 'ok'.
+-spec send_command_and_notify
         (pid(), pid(), pid(), rabbit_framing:amqp_method_record())
-        -> 'ok').
--spec(send_command_and_notify/5 ::
+        -> 'ok'.
+-spec send_command_and_notify
         (pid(), pid(), pid(), rabbit_framing:amqp_method_record(),
          rabbit_types:content())
-        -> 'ok').
--spec(send_command_flow/2 ::
-        (pid(), rabbit_framing:amqp_method_record()) -> 'ok').
--spec(send_command_flow/3 ::
+        -> 'ok'.
+-spec send_command_flow
+        (pid(), rabbit_framing:amqp_method_record()) -> 'ok'.
+-spec send_command_flow
         (pid(), rabbit_framing:amqp_method_record(), rabbit_types:content())
-        -> 'ok').
--spec(flush/1 :: (pid()) -> 'ok').
--spec(internal_send_command/4 ::
+        -> 'ok'.
+-spec flush(pid()) -> 'ok'.
+-spec internal_send_command
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          rabbit_framing:amqp_method_record(), rabbit_types:protocol())
-        -> 'ok').
--spec(internal_send_command/6 ::
+        -> 'ok'.
+-spec internal_send_command
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          rabbit_framing:amqp_method_record(), rabbit_types:content(),
          non_neg_integer(), rabbit_types:protocol())
-        -> 'ok').
+        -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_binary_generator.erl rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_binary_generator.erl
--- rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_binary_generator.erl	2016-03-31 17:21:34.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_binary_generator.erl	2016-07-23 17:41:06.241389444 +0300
@@ -22,8 +22,8 @@
 -include("rabbit_amqp1_0.hrl").
 
 -ifdef(use_specs).
--spec(generate/1 :: (tuple()) -> iolist()).
--spec(build_frame/2 :: (int(), iolist()) -> iolist()).
+-spec generate(tuple()) -> iolist().
+-spec build_frame(int(), iolist()) -> iolist().
 -endif.
 
 -define(AMQP_FRAME_TYPE, 0).
diff -urN rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_binary_parser.erl rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_binary_parser.erl
--- rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_binary_parser.erl	2016-03-31 17:21:34.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_binary_parser.erl	2016-07-23 17:44:39.730607960 +0300
@@ -21,7 +21,7 @@
 -include("rabbit_amqp1_0.hrl").
 
 -ifdef(use_specs).
--spec(parse/1 :: (binary()) -> tuple()).
+-spec parse(binary()) -> tuple().
 -endif.
 
 parse_all(ValueBin) when is_binary(ValueBin) ->
diff -urN rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_session_sup.erl rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_session_sup.erl
--- rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_session_sup.erl	2016-03-31 17:21:34.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_session_sup.erl	2016-07-23 17:41:34.446286199 +0300
@@ -35,7 +35,7 @@
          rabbit_channel:channel_number(), non_neg_integer(), pid(),
          rabbit_access_control:username(), rabbit_types:vhost(), pid()}).
 
--spec(start_link/1 :: (start_link_args()) -> {'ok', pid(), pid()}).
+-spec start_link(start_link_args()) -> {'ok', pid(), pid()}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_session_sup_sup.erl rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_session_sup_sup.erl
--- rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_session_sup_sup.erl	2016-03-31 17:21:34.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_session_sup_sup.erl	2016-07-23 17:44:18.245686606 +0300
@@ -29,9 +29,9 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(start_session/2 :: (pid(), rabbit_amqp1_0_session_sup:start_link_args()) ->
-                              {'ok', pid(), pid()}).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec start_session(pid(), rabbit_amqp1_0_session_sup:start_link_args()) ->
+                              {'ok', pid(), pid()}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_util.erl rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_util.erl
--- rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_util.erl	2016-03-31 17:21:34.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_util.erl	2016-07-23 17:42:11.656149991 +0300
@@ -27,12 +27,12 @@
 -type(serial_number() :: non_neg_integer()).
 -type(serial_compare_result() :: 'equal' | 'less' | 'greater').
 
--spec(serial_add/2 :: (serial_number(), non_neg_integer()) ->
-             serial_number()).
--spec(serial_compare/2 :: (serial_number(), serial_number()) ->
-             serial_compare_result()).
--spec(serial_diff/2 :: (serial_number(), serial_number()) ->
-             integer()).
+-spec serial_add(serial_number(), non_neg_integer()) ->
+             serial_number().
+-spec serial_compare(serial_number(), serial_number()) ->
+             serial_compare_result().
+-spec serial_diff(serial_number(), serial_number()) ->
+             integer().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_writer.erl rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_writer.erl
--- rabbitmq-server-3.6.2/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_writer.erl	2016-03-31 17:21:34.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbitmq_amqp1_0/src/rabbit_amqp1_0_writer.erl	2016-07-23 17:43:49.015793603 +0300
@@ -38,48 +38,48 @@
 
 -ifdef(use_specs).
 
--spec(start/5 ::
+-spec start
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          non_neg_integer(), rabbit_types:protocol(), pid())
-        -> rabbit_types:ok(pid())).
--spec(start_link/5 ::
+        -> rabbit_types:ok(pid()).
+-spec start_link
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          non_neg_integer(), rabbit_types:protocol(), pid())
-        -> rabbit_types:ok(pid())).
--spec(start/6 ::
+        -> rabbit_types:ok(pid()).
+-spec start
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          non_neg_integer(), rabbit_types:protocol(), pid(), boolean())
-        -> rabbit_types:ok(pid())).
--spec(start_link/6 ::
+        -> rabbit_types:ok(pid()).
+-spec start_link
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          non_neg_integer(), rabbit_types:protocol(), pid(), boolean())
-        -> rabbit_types:ok(pid())).
--spec(send_command/2 ::
-        (pid(), rabbit_framing:amqp_method_record()) -> 'ok').
--spec(send_command/3 ::
+        -> rabbit_types:ok(pid()).
+-spec send_command
+        (pid(), rabbit_framing:amqp_method_record()) -> 'ok'.
+-spec send_command
         (pid(), rabbit_framing:amqp_method_record(), rabbit_types:content())
-        -> 'ok').
--spec(send_command_sync/2 ::
-        (pid(), rabbit_framing:amqp_method_record()) -> 'ok').
--spec(send_command_sync/3 ::
+        -> 'ok'.
+-spec send_command_sync
+        (pid(), rabbit_framing:amqp_method_record()) -> 'ok'.
+-spec send_command_sync
         (pid(), rabbit_framing:amqp_method_record(), rabbit_types:content())
-        -> 'ok').
--spec(send_command_and_notify/4 ::
+        -> 'ok'.
+-spec send_command_and_notify
         (pid(), pid(), pid(), rabbit_framing:amqp_method_record())
-        -> 'ok').
--spec(send_command_and_notify/5 ::
+        -> 'ok'.
+-spec send_command_and_notify
         (pid(), pid(), pid(), rabbit_framing:amqp_method_record(),
          rabbit_types:content())
-        -> 'ok').
--spec(internal_send_command/4 ::
+        -> 'ok'.
+-spec internal_send_command
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          rabbit_framing:amqp_method_record(), rabbit_types:protocol())
-        -> 'ok').
--spec(internal_send_command/6 ::
+        -> 'ok'.
+-spec internal_send_command
         (rabbit_net:socket(), rabbit_channel:channel_number(),
          rabbit_framing:amqp_method_record(), rabbit_types:content(),
          non_neg_integer(), rabbit_types:protocol())
-        -> 'ok').
+        -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbitmq_mqtt/src/rabbit_mqtt_retainer.erl rabbitmq-server-3.6.2-new/deps/rabbitmq_mqtt/src/rabbit_mqtt_retainer.erl
--- rabbitmq-server-3.6.2/deps/rabbitmq_mqtt/src/rabbit_mqtt_retainer.erl	2016-03-31 17:28:37.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbitmq_mqtt/src/rabbit_mqtt_retainer.erl	2016-07-23 16:40:51.914619803 +0300
@@ -33,10 +33,10 @@
 
 -ifdef(use_specs).
 
--spec(retain/3 :: (pid(), string(), mqtt_msg()) ->
+-spec retain(pid(), string(), mqtt_msg()) ->
     {noreply, NewState :: term()} |
     {noreply, NewState :: term(), timeout() | hibernate} |
-    {stop, Reason :: term(), NewState :: term()}).
+    {stop, Reason :: term(), NewState :: term()}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/deps/rabbitmq_mqtt/src/rabbit_mqtt_retainer_sup.erl rabbitmq-server-3.6.2-new/deps/rabbitmq_mqtt/src/rabbit_mqtt_retainer_sup.erl
--- rabbitmq-server-3.6.2/deps/rabbitmq_mqtt/src/rabbit_mqtt_retainer_sup.erl	2016-03-31 17:28:37.000000000 +0300
+++ rabbitmq-server-3.6.2-new/deps/rabbitmq_mqtt/src/rabbit_mqtt_retainer_sup.erl	2016-07-23 16:41:26.034494906 +0300
@@ -23,8 +23,8 @@
 -define(ENCODING, utf8).
 
 -ifdef(use_specs).
--spec(start_child/1 :: (binary()) -> supervisor2:startchild_ret()).
--spec(start_child/2 :: (term(), binary()) -> supervisor2:startchild_ret()).
+-spec start_child(binary()) -> supervisor2:startchild_ret().
+-spec start_child(term(), binary()) -> supervisor2:startchild_ret().
 -endif.
 
 start_link(SupName) ->
diff -urN rabbitmq-server-3.6.2/include/gm_specs.hrl rabbitmq-server-3.6.2-new/include/gm_specs.hrl
--- rabbitmq-server-3.6.2/include/gm_specs.hrl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/include/gm_specs.hrl	2016-07-23 15:49:38.425870407 +0300
@@ -20,9 +20,9 @@
 -type(args() :: any()).
 -type(members() :: [pid()]).
 
--spec(joined/2           :: (args(), members())    -> callback_result()).
--spec(members_changed/3  :: (args(), members(),members()) -> callback_result()).
--spec(handle_msg/3       :: (args(), pid(), any()) -> callback_result()).
--spec(handle_terminate/2 :: (args(), term())       -> any()).
+-spec joined(args(), members())    -> callback_result().
+-spec members_changed(args(), members(),members()) -> callback_result().
+-spec handle_msg(args(), pid(), any()) -> callback_result().
+-spec handle_terminate(args(), term())       -> any().
 
 -endif.
diff -urN rabbitmq-server-3.6.2/src/background_gc.erl rabbitmq-server-3.6.2-new/src/background_gc.erl
--- rabbitmq-server-3.6.2/src/background_gc.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/background_gc.erl	2016-07-23 12:50:14.645271571 +0300
@@ -34,9 +34,9 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> {'ok', pid()} | {'error', any()}).
--spec(run/0 :: () -> 'ok').
--spec(gc/0 :: () -> 'ok').
+-spec start_link() -> {'ok', pid()} | {'error', any()}.
+-spec run() -> 'ok'.
+-spec gc() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/delegate.erl rabbitmq-server-3.6.2-new/src/delegate.erl
--- rabbitmq-server-3.6.2/src/delegate.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/delegate.erl	2016-07-23 12:56:58.833792026 +0300
@@ -64,19 +64,17 @@
 -type(monitor_ref() :: reference() | {atom(), pid()}).
 -type(fun_or_mfa(A) :: fun ((pid()) -> A) | {atom(), atom(), [any()]}).
 
--spec(start_link/1 ::
-        (non_neg_integer()) -> {'ok', pid()} | ignore | {'error', any()}).
--spec(invoke/2 :: ( pid(),  fun_or_mfa(A)) -> A;
+-spec start_link(non_neg_integer()) -> {'ok', pid()} | ignore | {'error', any()}.
+-spec invoke( pid(),  fun_or_mfa(A)) -> A;
                   ([pid()], fun_or_mfa(A)) -> {[{pid(), A}],
-                                               [{pid(), term()}]}).
--spec(invoke_no_result/2 :: (pid() | [pid()], fun_or_mfa(any())) -> 'ok').
--spec(monitor/2 :: ('process', pid()) -> monitor_ref()).
--spec(demonitor/1 :: (monitor_ref()) -> 'true').
+                                               [{pid(), term()}]}.
+-spec invoke_no_result(pid() | [pid()], fun_or_mfa(any())) -> 'ok'.
+-spec monitor('process', pid()) -> monitor_ref().
+-spec demonitor(monitor_ref()) -> 'true'.
 
--spec(call/2 ::
-        ( pid(),  any()) -> any();
-        ([pid()], any()) -> {[{pid(), any()}], [{pid(), term()}]}).
--spec(cast/2 :: (pid() | [pid()], any()) -> 'ok').
+-spec call( pid(),  any()) -> any();
+        ([pid()], any()) -> {[{pid(), any()}], [{pid(), term()}]}.
+-spec cast(pid() | [pid()], any()) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/delegate_sup.erl rabbitmq-server-3.6.2-new/src/delegate_sup.erl
--- rabbitmq-server-3.6.2/src/delegate_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/delegate_sup.erl	2016-07-23 13:13:45.775106085 +0300
@@ -28,8 +28,8 @@
 
 -ifdef(use_specs).
 
--spec(start_link/1 :: (integer()) -> rabbit_types:ok_pid_or_error()).
--spec(count/1 :: ([node()]) -> integer()).
+-spec start_link(integer()) -> rabbit_types:ok_pid_or_error().
+-spec count([node()]) -> integer().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/dtree.erl rabbitmq-server-3.6.2-new/src/dtree.erl
--- rabbitmq-server-3.6.2/src/dtree.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/dtree.erl	2016-07-23 13:15:35.039706119 +0300
@@ -48,16 +48,16 @@
 -type(val()        :: any()).
 -type(kv()         :: {pk(), val()}).
 
--spec(empty/0      :: () -> ?MODULE()).
--spec(insert/4     :: (pk(), [sk()], val(), ?MODULE()) -> ?MODULE()).
--spec(take/3       :: ([pk()], sk(), ?MODULE()) -> {[kv()], ?MODULE()}).
--spec(take/2       :: (sk(), ?MODULE()) -> {[kv()], ?MODULE()}).
--spec(take_all/2   :: (sk(), ?MODULE()) -> {[kv()], ?MODULE()}).
--spec(drop/2       :: (pk(), ?MODULE()) -> ?MODULE()).
--spec(is_defined/2 :: (sk(), ?MODULE()) -> boolean()).
--spec(is_empty/1   :: (?MODULE()) -> boolean()).
--spec(smallest/1   :: (?MODULE()) -> kv()).
--spec(size/1       :: (?MODULE()) -> non_neg_integer()).
+-spec empty() -> ?MODULE().
+-spec insert(pk(), [sk()], val(), ?MODULE()) -> ?MODULE().
+-spec take([pk()], sk(), ?MODULE()) -> {[kv()], ?MODULE()}.
+-spec take(sk(), ?MODULE()) -> {[kv()], ?MODULE()}.
+-spec take_all(sk(), ?MODULE()) -> {[kv()], ?MODULE()}.
+-spec drop(pk(), ?MODULE()) -> ?MODULE().
+-spec is_defined(sk(), ?MODULE()) -> boolean().
+-spec is_empty(?MODULE()) -> boolean().
+-spec smallest(?MODULE()) -> kv().
+-spec size(?MODULE()) -> non_neg_integer().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/file_handle_cache.erl rabbitmq-server-3.6.2-new/src/file_handle_cache.erl
--- rabbitmq-server-3.6.2/src/file_handle_cache.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/file_handle_cache.erl	2016-07-23 13:52:25.046616317 +0300
@@ -243,41 +243,40 @@
                      {'cur', integer()})).
 -type(offset() :: non_neg_integer()).
 
--spec(register_callback/3 :: (atom(), atom(), [any()]) -> 'ok').
--spec(open/3 ::
-        (file:filename(), [any()],
+-spec register_callback(atom(), atom(), [any()]) -> 'ok'.
+-spec open(file:filename(), [any()],
          [{'write_buffer', (non_neg_integer() | 'infinity' | 'unbuffered')} |
           {'read_buffer', (non_neg_integer() | 'unbuffered')}])
-        -> val_or_error(ref())).
--spec(close/1 :: (ref()) -> ok_or_error()).
--spec(read/2 :: (ref(), non_neg_integer()) ->
-                     val_or_error([char()] | binary()) | 'eof').
--spec(append/2 :: (ref(), iodata()) -> ok_or_error()).
--spec(sync/1 :: (ref()) ->  ok_or_error()).
--spec(position/2 :: (ref(), position()) -> val_or_error(offset())).
--spec(truncate/1 :: (ref()) -> ok_or_error()).
--spec(current_virtual_offset/1 :: (ref()) -> val_or_error(offset())).
--spec(current_raw_offset/1     :: (ref()) -> val_or_error(offset())).
--spec(flush/1 :: (ref()) -> ok_or_error()).
--spec(copy/3 :: (ref(), ref(), non_neg_integer()) ->
-                     val_or_error(non_neg_integer())).
--spec(delete/1 :: (ref()) -> ok_or_error()).
--spec(clear/1 :: (ref()) -> ok_or_error()).
--spec(set_maximum_since_use/1 :: (non_neg_integer()) -> 'ok').
--spec(obtain/0 :: () -> 'ok').
--spec(obtain/1 :: (non_neg_integer()) -> 'ok').
--spec(release/0 :: () -> 'ok').
--spec(release/1 :: (non_neg_integer()) -> 'ok').
--spec(transfer/1 :: (pid()) -> 'ok').
--spec(transfer/2 :: (pid(), non_neg_integer()) -> 'ok').
--spec(with_handle/1 :: (fun(() -> A)) -> A).
--spec(with_handle/2 :: (non_neg_integer(), fun(() -> A)) -> A).
--spec(set_limit/1 :: (non_neg_integer()) -> 'ok').
--spec(get_limit/0 :: () -> non_neg_integer()).
--spec(info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(info/0 :: () -> rabbit_types:infos()).
--spec(info/1 :: ([atom()]) -> rabbit_types:infos()).
--spec(ulimit/0 :: () -> 'unknown' | non_neg_integer()).
+        -> val_or_error(ref()).
+-spec close(ref()) -> ok_or_error().
+-spec read(ref(), non_neg_integer()) ->
+                     val_or_error([char()] | binary()) | 'eof'.
+-spec append(ref(), iodata()) -> ok_or_error().
+-spec sync(ref()) ->  ok_or_error().
+-spec position(ref(), position()) -> val_or_error(offset()).
+-spec truncate(ref()) -> ok_or_error().
+-spec current_virtual_offset(ref()) -> val_or_error(offset()).
+-spec current_raw_offset(ref()) -> val_or_error(offset()).
+-spec flush(ref()) -> ok_or_error().
+-spec copy(ref(), ref(), non_neg_integer()) ->
+                     val_or_error(non_neg_integer()).
+-spec delete(ref()) -> ok_or_error().
+-spec clear(ref()) -> ok_or_error().
+-spec set_maximum_since_use(non_neg_integer()) -> 'ok'.
+-spec obtain() -> 'ok'.
+-spec obtain(non_neg_integer()) -> 'ok'.
+-spec release() -> 'ok'.
+-spec release(non_neg_integer()) -> 'ok'.
+-spec transfer(pid()) -> 'ok'.
+-spec transfer(pid(), non_neg_integer()) -> 'ok'.
+-spec with_handle(fun(() -> A)) -> A.
+-spec with_handle(non_neg_integer(), fun(() -> A)) -> A.
+-spec set_limit(non_neg_integer()) -> 'ok'.
+-spec get_limit() -> non_neg_integer().
+-spec info_keys() -> rabbit_types:info_keys().
+-spec info() -> rabbit_types:infos().
+-spec info([atom()]) -> rabbit_types:infos().
+-spec ulimit() -> 'unknown' | non_neg_integer().
 
 -endif.
 
@@ -1475,7 +1474,7 @@
 notify_age0(Clients, CStates, Required) ->
     case [CState || CState <- CStates, CState#cstate.callback =/= undefined] of
         []            -> ok;
-        Notifications -> S = random:uniform(length(Notifications)),
+        Notifications -> S = rand:uniform(length(Notifications)),
                          {L1, L2} = lists:split(S, Notifications),
                          notify(Clients, Required, L2 ++ L1)
     end.
diff -urN rabbitmq-server-3.6.2/src/gatherer.erl rabbitmq-server-3.6.2-new/src/gatherer.erl
--- rabbitmq-server-3.6.2/src/gatherer.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/gatherer.erl	2016-07-23 13:20:31.338621507 +0300
@@ -41,13 +41,13 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(stop/1 :: (pid()) -> 'ok').
--spec(fork/1 :: (pid()) -> 'ok').
--spec(finish/1 :: (pid()) -> 'ok').
--spec(in/2 :: (pid(), any()) -> 'ok').
--spec(sync_in/2 :: (pid(), any()) -> 'ok').
--spec(out/1 :: (pid()) -> {'value', any()} | 'empty').
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec stop(pid()) -> 'ok'.
+-spec fork(pid()) -> 'ok'.
+-spec finish(pid()) -> 'ok'.
+-spec in(pid(), any()) -> 'ok'.
+-spec sync_in(pid(), any()) -> 'ok'.
+-spec out(pid()) -> {'value', any()} | 'empty'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/gm.erl rabbitmq-server-3.6.2-new/src/gm.erl
--- rabbitmq-server-3.6.2/src/gm.erl	2016-05-03 08:03:35.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/gm.erl	2016-07-23 20:17:07.687121572 +0300
@@ -443,15 +443,15 @@
 -type(group_name() :: any()).
 -type(txn_fun() :: fun((fun(() -> any())) -> any())).
 
--spec(create_tables/0 :: () -> 'ok' | {'aborted', any()}).
--spec(start_link/4 :: (group_name(), atom(), any(), txn_fun()) ->
-                           rabbit_types:ok_pid_or_error()).
--spec(leave/1 :: (pid()) -> 'ok').
--spec(broadcast/2 :: (pid(), any()) -> 'ok').
--spec(confirmed_broadcast/2 :: (pid(), any()) -> 'ok').
--spec(info/1 :: (pid()) -> rabbit_types:infos()).
--spec(validate_members/2 :: (pid(), [pid()]) -> 'ok').
--spec(forget_group/1 :: (group_name()) -> 'ok').
+-spec create_tables() -> 'ok' | {'aborted', any()}.
+-spec start_link(group_name(), atom(), any(), txn_fun()) ->
+                           rabbit_types:ok_pid_or_error().
+-spec leave(pid()) -> 'ok'.
+-spec broadcast(pid(), any()) -> 'ok'.
+-spec confirmed_broadcast(pid(), any()) -> 'ok'.
+-spec info(pid()) -> rabbit_types:infos().
+-spec validate_members(pid(), [pid()]) -> 'ok'.
+-spec forget_group(group_name()) -> 'ok'.
 
 %% The joined, members_changed and handle_msg callbacks can all return
 %% any of the following terms:
@@ -551,9 +551,9 @@
 
 init([GroupName, Module, Args, TxnFun]) ->
     put(process_name, {?MODULE, GroupName}),
-    _ = random:seed(erlang:phash2([node()]),
+    _ = rand:seed(exs64, {erlang:phash2([node()]),
                     time_compat:monotonic_time(),
-                    time_compat:unique_integer()),
+                    time_compat:unique_integer()}),
     Self = make_member(GroupName),
     gen_server2:cast(self(), join),
     {ok, #state { self                = Self,
@@ -1084,7 +1084,7 @@
                                prune_or_create_group(Self, GroupName, TxnFun),
                                TxnFun);
                 Alive ->
-                    Left = lists:nth(random:uniform(length(Alive)), Alive),
+                    Left = lists:nth(rand:uniform(length(Alive)), Alive),
                     Handler =
                         fun () ->
                                 join_group(
diff -urN rabbitmq-server-3.6.2/src/lqueue.erl rabbitmq-server-3.6.2-new/src/lqueue.erl
--- rabbitmq-server-3.6.2/src/lqueue.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/lqueue.erl	2016-07-23 13:22:16.673235926 +0300
@@ -33,20 +33,20 @@
 -type(value()     :: any()).
 -type(result()    :: 'empty' | {'value', value()}).
 
--spec(new/0       :: () -> ?MODULE()).
--spec(is_empty/1  :: (?MODULE()) -> boolean()).
--spec(len/1       :: (?MODULE()) -> non_neg_integer()).
--spec(in/2        :: (value(), ?MODULE()) -> ?MODULE()).
--spec(in_r/2      :: (value(), ?MODULE()) -> ?MODULE()).
--spec(out/1       :: (?MODULE()) -> {result(), ?MODULE()}).
--spec(out_r/1     :: (?MODULE()) -> {result(), ?MODULE()}).
--spec(join/2      :: (?MODULE(), ?MODULE()) -> ?MODULE()).
--spec(foldl/3     :: (fun ((value(), B) -> B), B, ?MODULE()) -> B).
--spec(foldr/3     :: (fun ((value(), B) -> B), B, ?MODULE()) -> B).
--spec(from_list/1 :: ([value()]) -> ?MODULE()).
--spec(to_list/1   :: (?MODULE()) -> [value()]).
--spec(peek/1      :: (?MODULE()) -> result()).
--spec(peek_r/1    :: (?MODULE()) -> result()).
+-spec new() -> ?MODULE().
+-spec is_empty(?MODULE()) -> boolean().
+-spec len(?MODULE()) -> non_neg_integer().
+-spec in(value(), ?MODULE()) -> ?MODULE().
+-spec in_r(value(), ?MODULE()) -> ?MODULE().
+-spec out(?MODULE()) -> {result(), ?MODULE()}.
+-spec out_r(?MODULE()) -> {result(), ?MODULE()}.
+-spec join(?MODULE(), ?MODULE()) -> ?MODULE().
+-spec foldl(fun ((value(), B) -> B), B, ?MODULE()) -> B.
+-spec foldr(fun ((value(), B) -> B), B, ?MODULE()) -> B.
+-spec from_list([value()]) -> ?MODULE().
+-spec to_list(?MODULE()) -> [value()].
+-spec peek(?MODULE()) -> result().
+-spec peek_r(?MODULE()) -> result().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/mnesia_sync.erl rabbitmq-server-3.6.2-new/src/mnesia_sync.erl
--- rabbitmq-server-3.6.2/src/mnesia_sync.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/mnesia_sync.erl	2016-07-23 13:22:51.098109913 +0300
@@ -36,7 +36,7 @@
 
 -ifdef(use_specs).
 
--spec(sync/0 :: () -> 'ok').
+-spec sync() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/pg_local.erl rabbitmq-server-3.6.2-new/src/pg_local.erl
--- rabbitmq-server-3.6.2/src/pg_local.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/pg_local.erl	2016-07-23 13:24:01.522852121 +0300
@@ -45,14 +45,14 @@
 
 -type(name() :: term()).
 
--spec(start_link/0 :: () -> {'ok', pid()} | {'error', any()}).
--spec(start/0 :: () -> {'ok', pid()} | {'error', any()}).
--spec(join/2 :: (name(), pid()) -> 'ok').
--spec(leave/2 :: (name(), pid()) -> 'ok').
--spec(get_members/1 :: (name()) -> [pid()]).
--spec(in_group/2 :: (name(), pid()) -> boolean()).
+-spec start_link() -> {'ok', pid()} | {'error', any()}.
+-spec start() -> {'ok', pid()} | {'error', any()}.
+-spec join(name(), pid()) -> 'ok'.
+-spec leave(name(), pid()) -> 'ok'.
+-spec get_members(name()) -> [pid()].
+-spec in_group(name(), pid()) -> boolean().
 
--spec(sync/0 :: () -> 'ok').
+-spec sync() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_access_control.erl rabbitmq-server-3.6.2-new/src/rabbit_access_control.erl
--- rabbitmq-server-3.6.2/src/rabbit_access_control.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_access_control.erl	2016-07-23 13:30:05.431520021 +0300
@@ -29,23 +29,23 @@
 
 -type(permission_atom() :: 'configure' | 'read' | 'write').
 
--spec(check_user_pass_login/2 ::
+-spec check_user_pass_login
         (rabbit_types:username(), rabbit_types:password())
         -> {'ok', rabbit_types:user()} |
-           {'refused', rabbit_types:username(), string(), [any()]}).
--spec(check_user_login/2 ::
+           {'refused', rabbit_types:username(), string(), [any()]}.
+-spec check_user_login
         (rabbit_types:username(), [{atom(), any()}])
         -> {'ok', rabbit_types:user()} |
-           {'refused', rabbit_types:username(), string(), [any()]}).
--spec(check_user_loopback/2 :: (rabbit_types:username(),
+           {'refused', rabbit_types:username(), string(), [any()]}.
+-spec check_user_loopback(rabbit_types:username(),
                                 rabbit_net:socket() | inet:ip_address())
-        -> 'ok' | 'not_allowed').
--spec(check_vhost_access/3 ::
-        (rabbit_types:user(), rabbit_types:vhost(), rabbit_net:socket() | #authz_socket_info{})
-        -> 'ok' | rabbit_types:channel_exit()).
--spec(check_resource_access/3 ::
+        -> 'ok' | 'not_allowed'.
+-spec check_vhost_access
+	(rabbit_types:user(), rabbit_types:vhost(), rabbit_net:socket() | #authz_socket_info{})
+        -> 'ok' | rabbit_types:channel_exit().
+-spec check_resource_access
         (rabbit_types:user(), rabbit_types:r(atom()), permission_atom())
-        -> 'ok' | rabbit_types:channel_exit()).
+        -> 'ok' | rabbit_types:channel_exit().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_alarm.erl rabbitmq-server-3.6.2-new/src/rabbit_alarm.erl
--- rabbitmq-server-3.6.2/src/rabbit_alarm.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_alarm.erl	2016-07-23 13:31:08.031290873 +0300
@@ -54,15 +54,15 @@
 -type(resource_alarm() :: {resource_limit, resource_alarm_source(), node()}).
 -type(alarm() :: local_alarm() | resource_alarm()).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(start/0 :: () -> 'ok').
--spec(stop/0 :: () -> 'ok').
--spec(register/2 :: (pid(), rabbit_types:mfargs()) -> [atom()]).
--spec(set_alarm/1 :: ({alarm(), []}) -> 'ok').
--spec(clear_alarm/1 :: (alarm()) -> 'ok').
--spec(on_node_up/1 :: (node()) -> 'ok').
--spec(on_node_down/1 :: (node()) -> 'ok').
--spec(get_alarms/0 :: () -> [{alarm(), []}]).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec start() -> 'ok'.
+-spec stop() -> 'ok'.
+-spec register(pid(), rabbit_types:mfargs()) -> [atom()].
+-spec set_alarm({alarm(), []}) -> 'ok'.
+-spec clear_alarm(alarm()) -> 'ok'.
+-spec on_node_up(node()) -> 'ok'.
+-spec on_node_down(node()) -> 'ok'.
+-spec get_alarms() -> [{alarm(), []}].
 
 -else.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_amqqueue_process.erl rabbitmq-server-3.6.2-new/src/rabbit_amqqueue_process.erl
--- rabbitmq-server-3.6.2/src/rabbit_amqqueue_process.erl	2016-04-11 17:16:23.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_amqqueue_process.erl	2016-07-23 13:31:44.441157593 +0300
@@ -61,10 +61,10 @@
 
 -ifdef(use_specs).
 
--spec(info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(init_with_backing_queue_state/7 ::
+-spec info_keys() -> rabbit_types:info_keys().
+-spec init_with_backing_queue_state
         (rabbit_types:amqqueue(), atom(), tuple(), any(),
-         [rabbit_types:delivery()], pmon:pmon(), dict:dict()) -> #q{}).
+         [rabbit_types:delivery()], pmon:pmon(), dict:dict()) -> #q{}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_amqqueue_sup.erl rabbitmq-server-3.6.2-new/src/rabbit_amqqueue_sup.erl
--- rabbitmq-server-3.6.2/src/rabbit_amqqueue_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_amqqueue_sup.erl	2016-07-23 13:32:42.860943746 +0300
@@ -28,8 +28,8 @@
 
 -ifdef(use_specs).
 
--spec(start_link/2 :: (rabbit_types:amqqueue(), rabbit_prequeue:start_mode()) ->
-                           {'ok', pid(), pid()}).
+-spec start_link(rabbit_types:amqqueue(), rabbit_prequeue:start_mode()) ->
+                           {'ok', pid(), pid()}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_amqqueue_sup_sup.erl rabbitmq-server-3.6.2-new/src/rabbit_amqqueue_sup_sup.erl
--- rabbitmq-server-3.6.2/src/rabbit_amqqueue_sup_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_amqqueue_sup_sup.erl	2016-07-23 13:32:19.566029018 +0300
@@ -30,9 +30,9 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(start_queue_process/3 :: (node(), rabbit_types:amqqueue(),
-                               'declare' | 'recovery' | 'slave') -> pid()).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec start_queue_process(node(), rabbit_types:amqqueue(),
+                               'declare' | 'recovery' | 'slave') -> pid().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_binding.erl rabbitmq-server-3.6.2-new/src/rabbit_binding.erl
--- rabbitmq-server-3.6.2/src/rabbit_binding.erl	2016-05-17 23:26:51.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_binding.erl	2016-07-23 13:36:19.965149029 +0300
@@ -56,43 +56,43 @@
 %% dialyzer into objecting to everything that uses it.
 -type(deletions() :: dict:dict()).
 
--spec(recover/2 :: ([rabbit_exchange:name()], [rabbit_amqqueue:name()]) ->
-                        'ok').
--spec(exists/1 :: (rabbit_types:binding()) -> boolean() | bind_errors()).
--spec(add/1    :: (rabbit_types:binding())              -> bind_res()).
--spec(add/2    :: (rabbit_types:binding(), inner_fun()) -> bind_res()).
--spec(remove/1 :: (rabbit_types:binding())              -> bind_res()).
--spec(remove/2 :: (rabbit_types:binding(), inner_fun()) -> bind_res()).
--spec(list/1 :: (rabbit_types:vhost()) -> bindings()).
--spec(list_for_source/1 ::
-        (rabbit_types:binding_source()) -> bindings()).
--spec(list_for_destination/1 ::
-        (rabbit_types:binding_destination()) -> bindings()).
--spec(list_for_source_and_destination/2 ::
+-spec recover([rabbit_exchange:name()], [rabbit_amqqueue:name()]) ->
+                        'ok'.
+-spec exists(rabbit_types:binding()) -> boolean() | bind_errors().
+-spec add(rabbit_types:binding())              -> bind_res().
+-spec add(rabbit_types:binding(), inner_fun()) -> bind_res().
+-spec remove(rabbit_types:binding())              -> bind_res().
+-spec remove(rabbit_types:binding(), inner_fun()) -> bind_res().
+-spec list(rabbit_types:vhost()) -> bindings().
+-spec list_for_source
+        (rabbit_types:binding_source()) -> bindings().
+-spec list_for_destination
+        (rabbit_types:binding_destination()) -> bindings().
+-spec list_for_source_and_destination
         (rabbit_types:binding_source(), rabbit_types:binding_destination()) ->
-                                                bindings()).
--spec(info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(info/1 :: (rabbit_types:binding()) -> rabbit_types:infos()).
--spec(info/2 :: (rabbit_types:binding(), rabbit_types:info_keys()) ->
-                     rabbit_types:infos()).
--spec(info_all/1 :: (rabbit_types:vhost()) -> [rabbit_types:infos()]).
--spec(info_all/2 ::(rabbit_types:vhost(), rabbit_types:info_keys())
-                   -> [rabbit_types:infos()]).
--spec(info_all/4 ::(rabbit_types:vhost(), rabbit_types:info_keys(),
-                    reference(), pid()) -> 'ok').
--spec(has_for_source/1 :: (rabbit_types:binding_source()) -> boolean()).
--spec(remove_for_source/1 :: (rabbit_types:binding_source()) -> bindings()).
--spec(remove_for_destination/2 ::
-        (rabbit_types:binding_destination(), boolean()) -> deletions()).
--spec(remove_transient_for_destination/1 ::
-        (rabbit_types:binding_destination()) -> deletions()).
--spec(process_deletions/1 :: (deletions()) -> rabbit_misc:thunk('ok')).
--spec(combine_deletions/2 :: (deletions(), deletions()) -> deletions()).
--spec(add_deletion/3 :: (rabbit_exchange:name(),
+                                                bindings().
+-spec info_keys() -> rabbit_types:info_keys().
+-spec info(rabbit_types:binding()) -> rabbit_types:infos().
+-spec info(rabbit_types:binding(), rabbit_types:info_keys()) ->
+                     rabbit_types:infos().
+-spec info_all(rabbit_types:vhost()) -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:vhost(), rabbit_types:info_keys())
+                   -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:vhost(), rabbit_types:info_keys(),
+                    reference(), pid()) -> 'ok'.
+-spec has_for_source(rabbit_types:binding_source()) -> boolean().
+-spec remove_for_source(rabbit_types:binding_source()) -> bindings().
+-spec remove_for_destination
+        (rabbit_types:binding_destination(), boolean()) -> deletions().
+-spec remove_transient_for_destination
+        (rabbit_types:binding_destination()) -> deletions().
+-spec process_deletions(deletions()) -> rabbit_misc:thunk('ok').
+-spec combine_deletions(deletions(), deletions()) -> deletions().
+-spec add_deletion(rabbit_exchange:name(),
                          {'undefined' | rabbit_types:exchange(),
                           'deleted' | 'not_deleted',
-                          bindings()}, deletions()) -> deletions()).
--spec(new_deletions/0 :: () -> deletions()).
+                          bindings()}, deletions()) -> deletions().
+-spec new_deletions() -> deletions().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_channel_sup.erl rabbitmq-server-3.6.2-new/src/rabbit_channel_sup.erl
--- rabbitmq-server-3.6.2/src/rabbit_channel_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_channel_sup.erl	2016-07-23 13:37:27.464901944 +0300
@@ -49,7 +49,7 @@
          rabbit_types:protocol(), rabbit_types:user(), rabbit_types:vhost(),
          rabbit_framing:amqp_table(), pid()}).
 
--spec(start_link/1 :: (start_link_args()) -> {'ok', pid(), {pid(), any()}}).
+-spec start_link(start_link_args()) -> {'ok', pid(), {pid(), any()}}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_channel_sup_sup.erl rabbitmq-server-3.6.2-new/src/rabbit_channel_sup_sup.erl
--- rabbitmq-server-3.6.2/src/rabbit_channel_sup_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_channel_sup_sup.erl	2016-07-23 13:37:01.909995489 +0300
@@ -31,9 +31,9 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(start_channel/2 :: (pid(), rabbit_channel_sup:start_link_args()) ->
-                              {'ok', pid(), {pid(), any()}}).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec start_channel(pid(), rabbit_channel_sup:start_link_args()) ->
+                              {'ok', pid(), {pid(), any()}}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_client_sup.erl rabbitmq-server-3.6.2-new/src/rabbit_client_sup.erl
--- rabbitmq-server-3.6.2/src/rabbit_client_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_client_sup.erl	2016-07-23 13:39:30.739450694 +0300
@@ -28,12 +28,12 @@
 
 -ifdef(use_specs).
 
--spec(start_link/1 :: (rabbit_types:mfargs()) ->
-                           rabbit_types:ok_pid_or_error()).
--spec(start_link/2 :: ({'local', atom()}, rabbit_types:mfargs()) ->
-                           rabbit_types:ok_pid_or_error()).
--spec(start_link_worker/2 :: ({'local', atom()}, rabbit_types:mfargs()) ->
-                                  rabbit_types:ok_pid_or_error()).
+-spec start_link(rabbit_types:mfargs()) ->
+                           rabbit_types:ok_pid_or_error().
+-spec start_link({'local', atom()}, rabbit_types:mfargs()) ->
+                           rabbit_types:ok_pid_or_error().
+-spec start_link_worker({'local', atom()}, rabbit_types:mfargs()) ->
+                                  rabbit_types:ok_pid_or_error().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_cli.erl rabbitmq-server-3.6.2-new/src/rabbit_cli.erl
--- rabbitmq-server-3.6.2/src/rabbit_cli.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_cli.erl	2016-07-23 18:07:02.390693110 +0300
@@ -31,22 +31,22 @@
 -type(parse_result() :: {'ok', {atom(), [{option_name(), option_value()}], [string()]}} |
                         'no_command').
 
--spec(main/3 :: (fun (([string()], string()) -> parse_result()),
+-spec main(fun (([string()], string()) -> parse_result()),
                      fun ((atom(), atom(), [any()], [any()]) -> any()),
-                         atom()) -> no_return()).
--spec(start_distribution/0 :: () -> {'ok', pid()} | {'error', any()}).
--spec(start_distribution/1 :: (string()) -> {'ok', pid()} | {'error', any()}).
--spec(usage/1 :: (atom()) -> no_return()).
--spec(parse_arguments/4 ::
+                         atom()) -> no_return().
+-spec start_distribution() -> {'ok', pid()} | {'error', any()}.
+-spec start_distribution(string()) -> {'ok', pid()} | {'error', any()}.
+-spec usage(atom()) -> no_return().
+-spec parse_arguments
         ([{atom(), [{string(), optdef()}]} | atom()],
-         [{string(), optdef()}], string(), [string()]) -> parse_result()).
+         [{string(), optdef()}], string(), [string()]) -> parse_result().
 
--spec(filter_opts/2 :: ([{option_name(), option_value()}], [option_name()]) -> [boolean()]).
+-spec filter_opts([{option_name(), option_value()}], [option_name()]) -> [boolean()].
 
--spec(rpc_call/4 :: (node(), atom(), atom(), [any()]) -> any()).
--spec(rpc_call/5 :: (node(), atom(), atom(), [any()], number()) -> any()).
--spec(rpc_call/7 :: (node(), atom(), atom(), [any()], reference(), pid(),
-                     number()) -> any()).
+-spec rpc_call(node(), atom(), atom(), [any()]) -> any().
+-spec rpc_call(node(), atom(), atom(), [any()], number()) -> any().
+-spec rpc_call(node(), atom(), atom(), [any()], reference(), pid(),
+                     number()) -> any().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_connection_helper_sup.erl rabbitmq-server-3.6.2-new/src/rabbit_connection_helper_sup.erl
--- rabbitmq-server-3.6.2/src/rabbit_connection_helper_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_connection_helper_sup.erl	2016-07-23 13:40:06.764318823 +0300
@@ -38,10 +38,10 @@
 %%----------------------------------------------------------------------------
 
 -ifdef(use_specs).
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(start_channel_sup_sup/1 :: (pid()) -> rabbit_types:ok_pid_or_error()).
--spec(start_queue_collector/2 :: (pid(), rabbit_types:proc_name()) ->
-                                      rabbit_types:ok_pid_or_error()).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec start_channel_sup_sup(pid()) -> rabbit_types:ok_pid_or_error().
+-spec start_queue_collector(pid(), rabbit_types:proc_name()) ->
+                                      rabbit_types:ok_pid_or_error().
 -endif.
 
 %%----------------------------------------------------------------------------
diff -urN rabbitmq-server-3.6.2/src/rabbit_connection_sup.erl rabbitmq-server-3.6.2-new/src/rabbit_connection_sup.erl
--- rabbitmq-server-3.6.2/src/rabbit_connection_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_connection_sup.erl	2016-07-23 13:40:31.124229653 +0300
@@ -38,8 +38,8 @@
 
 -ifdef(use_specs).
 
--spec(start_link/4 :: (any(), rabbit_net:socket(), module(), any()) -> {'ok', pid(), pid()}).
--spec(reader/1 :: (pid()) -> pid()).
+-spec start_link(any(), rabbit_net:socket(), module(), any()) -> {'ok', pid(), pid()}.
+-spec reader(pid()) -> pid().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_control_main.erl rabbitmq-server-3.6.2-new/src/rabbit_control_main.erl
--- rabbitmq-server-3.6.2/src/rabbit_control_main.erl	2016-04-18 02:50:25.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_control_main.erl	2016-07-23 13:41:15.404067565 +0300
@@ -125,17 +125,17 @@
 
 -ifdef(use_specs).
 
--spec(start/0 :: () -> no_return()).
--spec(stop/0 :: () -> 'ok').
--spec(action/5 ::
+-spec start() -> no_return().
+-spec stop() -> 'ok'.
+-spec action
         (atom(), node(), [string()], [{string(), any()}],
          fun ((string(), [any()]) -> 'ok'))
-        -> 'ok').
+        -> 'ok'.
 
--spec(action/6 ::
+-spec action
         (atom(), node(), [string()], [{string(), any()}],
          fun ((string(), [any()]) -> 'ok'), timeout())
-        -> 'ok').
+        -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_direct.erl rabbitmq-server-3.6.2-new/src/rabbit_direct.erl
--- rabbitmq-server-3.6.2/src/rabbit_direct.erl	2016-04-25 22:23:22.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_direct.erl	2016-07-23 13:42:38.698762663 +0300
@@ -27,23 +27,23 @@
 
 -ifdef(use_specs).
 
--spec(boot/0 :: () -> 'ok').
--spec(force_event_refresh/1 :: (reference()) -> 'ok').
--spec(list/0 :: () -> [pid()]).
--spec(list_local/0 :: () -> [pid()]).
--spec(connect/5 :: (({'none', 'none'} | {rabbit_types:username(), 'none'} |
+-spec boot() -> 'ok'.
+-spec force_event_refresh(reference()) -> 'ok'.
+-spec list() -> [pid()].
+-spec list_local() -> [pid()].
+-spec connect(({'none', 'none'} | {rabbit_types:username(), 'none'} |
                      {rabbit_types:username(), rabbit_types:password()}),
                     rabbit_types:vhost(), rabbit_types:protocol(), pid(),
                     rabbit_event:event_props()) ->
                         rabbit_types:ok_or_error2(
                           {rabbit_types:user(), rabbit_framing:amqp_table()},
                           'broker_not_found_on_node' |
-                          {'auth_failure', string()} | 'access_refused')).
--spec(start_channel/9 ::
+                          {'auth_failure', string()} | 'access_refused').
+-spec start_channel
         (rabbit_channel:channel_number(), pid(), pid(), string(),
          rabbit_types:protocol(), rabbit_types:user(), rabbit_types:vhost(),
-         rabbit_framing:amqp_table(), pid()) -> {'ok', pid()}).
--spec(disconnect/2 :: (pid(), rabbit_event:event_props()) -> 'ok').
+         rabbit_framing:amqp_table(), pid()) -> {'ok', pid()}.
+-spec disconnect(pid(), rabbit_event:event_props()) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_disk_monitor.erl rabbitmq-server-3.6.2-new/src/rabbit_disk_monitor.erl
--- rabbitmq-server-3.6.2/src/rabbit_disk_monitor.erl	2016-05-03 08:03:35.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_disk_monitor.erl	2016-07-23 13:43:37.758546472 +0300
@@ -73,14 +73,14 @@
 -ifdef(use_specs).
 
 -type(disk_free_limit() :: (integer() | string() | {'mem_relative', float()})).
--spec(start_link/1 :: (disk_free_limit()) -> rabbit_types:ok_pid_or_error()).
--spec(get_disk_free_limit/0 :: () -> integer()).
--spec(set_disk_free_limit/1 :: (disk_free_limit()) -> 'ok').
--spec(get_min_check_interval/0 :: () -> integer()).
--spec(set_min_check_interval/1 :: (integer()) -> 'ok').
--spec(get_max_check_interval/0 :: () -> integer()).
--spec(set_max_check_interval/1 :: (integer()) -> 'ok').
--spec(get_disk_free/0 :: () -> (integer() | 'unknown')).
+-spec start_link(disk_free_limit()) -> rabbit_types:ok_pid_or_error().
+-spec get_disk_free_limit() -> integer().
+-spec set_disk_free_limit(disk_free_limit()) -> 'ok'.
+-spec get_min_check_interval() -> integer().
+-spec set_min_check_interval(integer()) -> 'ok'.
+-spec get_max_check_interval() -> integer().
+-spec set_max_check_interval(integer()) -> 'ok'.
+-spec get_disk_free() -> (integer() | 'unknown').
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_epmd_monitor.erl rabbitmq-server-3.6.2-new/src/rabbit_epmd_monitor.erl
--- rabbitmq-server-3.6.2/src/rabbit_epmd_monitor.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_epmd_monitor.erl	2016-07-23 13:44:07.383438029 +0300
@@ -32,7 +32,7 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit.erl rabbitmq-server-3.6.2-new/src/rabbit.erl
--- rabbitmq-server-3.6.2/src/rabbit.erl	2016-04-11 17:16:23.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit.erl	2016-07-23 15:25:54.931081156 +0300
@@ -206,38 +206,38 @@
 -type(param() :: atom()).
 -type(app_name() :: atom()).
 
--spec(start/0 :: () -> 'ok').
--spec(boot/0 :: () -> 'ok').
--spec(stop/0 :: () -> 'ok').
--spec(stop_and_halt/0 :: () -> no_return()).
--spec(await_startup/0 :: () -> 'ok').
--spec(status/0 ::
+-spec start() -> 'ok'.
+-spec boot() -> 'ok'.
+-spec stop() -> 'ok'.
+-spec stop_and_halt() -> no_return().
+-spec await_startup() -> 'ok'.
+-spec status
         () -> [{pid, integer()} |
                {running_applications, [{atom(), string(), string()}]} |
                {os, {atom(), atom()}} |
                {erlang_version, string()} |
-               {memory, any()}]).
--spec(is_running/0 :: () -> boolean()).
--spec(is_running/1 :: (node()) -> boolean()).
--spec(environment/0 :: () -> [{param(), term()}]).
--spec(rotate_logs/1 :: (file_suffix()) -> rabbit_types:ok_or_error(any())).
--spec(force_event_refresh/1 :: (reference()) -> 'ok').
+               {memory, any()}].
+-spec is_running() -> boolean().
+-spec is_running(node()) -> boolean().
+-spec environment() -> [{param(), term()}].
+-spec rotate_logs(file_suffix()) -> rabbit_types:ok_or_error(any()).
+-spec force_event_refresh(reference()) -> 'ok'.
 
--spec(log_location/1 :: ('sasl' | 'kernel') -> log_location()).
+-spec log_location('sasl' | 'kernel') -> log_location().
 
--spec(start/2 :: ('normal',[]) ->
+-spec start('normal',[]) ->
 		      {'error',
 		       {'erlang_version_too_old',
                         {'found',string(),string()},
                         {'required',string(),string()}}} |
-		      {'ok',pid()}).
--spec(stop/1 :: (_) -> 'ok').
+		      {'ok',pid()}.
+-spec stop(_) -> 'ok'.
 
--spec(maybe_insert_default_data/0 :: () -> 'ok').
--spec(boot_delegate/0 :: () -> 'ok').
--spec(recover/0 :: () -> 'ok').
--spec(start_apps/1 :: ([app_name()]) -> 'ok').
--spec(stop_apps/1 :: ([app_name()]) -> 'ok').
+-spec maybe_insert_default_data() -> 'ok'.
+-spec boot_delegate() -> 'ok'.
+-spec recover() -> 'ok'.
+-spec start_apps([app_name()]) -> 'ok'.
+-spec stop_apps([app_name()]) -> 'ok'.
 
 -endif.
 
@@ -597,7 +597,7 @@
     ok.
 
 -ifdef(use_specs).
--spec(boot_error/2 :: (term(), not_available | [tuple()]) -> no_return()).
+-spec boot_error(term(), not_available | [tuple()]) -> no_return().
 -endif.
 boot_error({could_not_start, rabbit, {{timeout_waiting_for_tables, _}, _}},
            _Stacktrace) ->
@@ -627,8 +627,8 @@
     boot_error(Reason, Fmt, Args, Stacktrace).
 
 -ifdef(use_specs).
--spec(boot_error/4 :: (term(), string(), [any()], not_available | [tuple()])
-                      -> no_return()).
+-spec boot_error(term(), string(), [any()], not_available | [tuple()])
+                      -> no_return().
 -endif.
 boot_error(Reason, Fmt, Args, not_available) ->
     log_boot_error_and_exit(Reason, Fmt, Args);
diff -urN rabbitmq-server-3.6.2/src/rabbit_error_logger.erl rabbitmq-server-3.6.2-new/src/rabbit_error_logger.erl
--- rabbitmq-server-3.6.2/src/rabbit_error_logger.erl	2016-04-11 17:16:23.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_error_logger.erl	2016-07-23 13:44:42.188310625 +0300
@@ -33,8 +33,8 @@
 
 -ifdef(use_specs).
 
--spec(start/0 :: () -> 'ok').
--spec(stop/0  :: () -> 'ok').
+-spec start() -> 'ok'.
+-spec stop() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_exchange.erl rabbitmq-server-3.6.2-new/src/rabbit_exchange.erl
--- rabbitmq-server-3.6.2/src/rabbit_exchange.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_exchange.erl	2016-07-23 15:29:30.950290410 +0300
@@ -37,68 +37,68 @@
 -type(type() :: atom()).
 -type(fun_name() :: atom()).
 
--spec(recover/0 :: () -> [name()]).
--spec(callback/4::
+-spec recover() -> [name()].
+-spec callback
         (rabbit_types:exchange(), fun_name(),
-         fun((boolean()) -> non_neg_integer()) | atom(), [any()]) -> 'ok').
--spec(policy_changed/2 ::
-        (rabbit_types:exchange(), rabbit_types:exchange()) -> 'ok').
--spec(declare/6 ::
+         fun((boolean()) -> non_neg_integer()) | atom(), [any()]) -> 'ok'.
+-spec policy_changed
+        (rabbit_types:exchange(), rabbit_types:exchange()) -> 'ok'.
+-spec declare
         (name(), type(), boolean(), boolean(), boolean(),
          rabbit_framing:amqp_table())
-        -> rabbit_types:exchange()).
--spec(check_type/1 ::
-        (binary()) -> atom() | rabbit_types:connection_exit()).
--spec(assert_equivalence/6 ::
+        -> rabbit_types:exchange().
+-spec check_type
+        (binary()) -> atom() | rabbit_types:connection_exit().
+-spec assert_equivalence
         (rabbit_types:exchange(), atom(), boolean(), boolean(), boolean(),
          rabbit_framing:amqp_table())
-        -> 'ok' | rabbit_types:connection_exit()).
--spec(assert_args_equivalence/2 ::
+        -> 'ok' | rabbit_types:connection_exit().
+-spec assert_args_equivalence
         (rabbit_types:exchange(), rabbit_framing:amqp_table())
-        -> 'ok' | rabbit_types:connection_exit()).
--spec(lookup/1 ::
+        -> 'ok' | rabbit_types:connection_exit().
+-spec lookup
         (name()) -> rabbit_types:ok(rabbit_types:exchange()) |
-                    rabbit_types:error('not_found')).
--spec(lookup_or_die/1 ::
+                    rabbit_types:error('not_found').
+-spec lookup_or_die
         (name()) -> rabbit_types:exchange() |
-                    rabbit_types:channel_exit()).
--spec(list/0 :: () -> [rabbit_types:exchange()]).
--spec(list/1 :: (rabbit_types:vhost()) -> [rabbit_types:exchange()]).
--spec(lookup_scratch/2 :: (name(), atom()) ->
+                    rabbit_types:channel_exit().
+-spec list() -> [rabbit_types:exchange()].
+-spec list(rabbit_types:vhost()) -> [rabbit_types:exchange()].
+-spec lookup_scratch(name(), atom()) ->
                                rabbit_types:ok(term()) |
-                               rabbit_types:error('not_found')).
--spec(update_scratch/3 :: (name(), atom(), fun((any()) -> any())) -> 'ok').
--spec(update/2 ::
+                               rabbit_types:error('not_found').
+-spec update_scratch(name(), atom(), fun((any()) -> any())) -> 'ok'.
+-spec update
         (name(),
          fun((rabbit_types:exchange()) -> rabbit_types:exchange()))
-         -> not_found | rabbit_types:exchange()).
--spec(update_decorators/1 :: (name()) -> 'ok').
--spec(immutable/1 :: (rabbit_types:exchange()) -> rabbit_types:exchange()).
--spec(info_keys/0 :: () -> rabbit_types:info_keys()).
--spec(info/1 :: (rabbit_types:exchange()) -> rabbit_types:infos()).
--spec(info/2 ::
+         -> not_found | rabbit_types:exchange().
+-spec update_decorators(name()) -> 'ok'.
+-spec immutable(rabbit_types:exchange()) -> rabbit_types:exchange().
+-spec info_keys() -> rabbit_types:info_keys().
+-spec info(rabbit_types:exchange()) -> rabbit_types:infos().
+-spec info
         (rabbit_types:exchange(), rabbit_types:info_keys())
-        -> rabbit_types:infos()).
--spec(info_all/1 :: (rabbit_types:vhost()) -> [rabbit_types:infos()]).
--spec(info_all/2 ::(rabbit_types:vhost(), rabbit_types:info_keys())
-                   -> [rabbit_types:infos()]).
--spec(info_all/4 ::(rabbit_types:vhost(), rabbit_types:info_keys(),
+        -> rabbit_types:infos().
+-spec info_all(rabbit_types:vhost()) -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:vhost(), rabbit_types:info_keys())
+                   -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:vhost(), rabbit_types:info_keys(),
                     reference(), pid())
-                   -> 'ok').
--spec(route/2 :: (rabbit_types:exchange(), rabbit_types:delivery())
-                 -> [rabbit_amqqueue:name()]).
--spec(delete/2 ::
+                   -> 'ok'.
+-spec route(rabbit_types:exchange(), rabbit_types:delivery())
+                 -> [rabbit_amqqueue:name()].
+-spec delete
         (name(),  'true') -> 'ok' | rabbit_types:error('not_found' | 'in_use');
-        (name(), 'false') -> 'ok' | rabbit_types:error('not_found')).
--spec(validate_binding/2 ::
+        (name(), 'false') -> 'ok' | rabbit_types:error('not_found').
+-spec validate_binding
         (rabbit_types:exchange(), rabbit_types:binding())
-        -> rabbit_types:ok_or_error({'binding_invalid', string(), [any()]})).
--spec(maybe_auto_delete/2::
+        -> rabbit_types:ok_or_error({'binding_invalid', string(), [any()]}).
+-spec maybe_auto_delete
         (rabbit_types:exchange(), boolean())
-        -> 'not_deleted' | {'deleted', rabbit_binding:deletions()}).
--spec(serial/1 :: (rabbit_types:exchange()) ->
-                       fun((boolean()) -> 'none' | pos_integer())).
--spec(peek_serial/1 :: (name()) -> pos_integer() | 'undefined').
+        -> 'not_deleted' | {'deleted', rabbit_binding:deletions()}.
+-spec serial(rabbit_types:exchange()) ->
+                       fun((boolean()) -> 'none' | pos_integer()).
+-spec peek_serial(name()) -> pos_integer() | 'undefined'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_exchange_type_headers.erl rabbitmq-server-3.6.2-new/src/rabbit_exchange_type_headers.erl
--- rabbitmq-server-3.6.2/src/rabbit_exchange_type_headers.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_exchange_type_headers.erl	2016-07-23 13:45:32.543126300 +0300
@@ -33,8 +33,8 @@
                     {enables,     kernel_ready}]}).
 
 -ifdef(use_specs).
--spec(headers_match/2 :: (rabbit_framing:amqp_table(),
-                          rabbit_framing:amqp_table()) -> boolean()).
+-spec headers_match(rabbit_framing:amqp_table(),
+                          rabbit_framing:amqp_table()) -> boolean().
 -endif.
 
 description() ->
diff -urN rabbitmq-server-3.6.2/src/rabbit_exchange_type_invalid.erl rabbitmq-server-3.6.2-new/src/rabbit_exchange_type_invalid.erl
--- rabbitmq-server-3.6.2/src/rabbit_exchange_type_invalid.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_exchange_type_invalid.erl	2016-07-23 13:46:03.043014654 +0300
@@ -32,8 +32,8 @@
 serialise_events() -> false.
 
 -ifdef(use_specs).
--spec(route/2 :: (rabbit_types:exchange(), rabbit_types:delivery())
-                 -> no_return()).
+-spec route(rabbit_types:exchange(), rabbit_types:delivery())
+                 -> no_return().
 -endif.
 route(#exchange{name = Name, type = Type}, _) ->
     rabbit_misc:protocol_error(
diff -urN rabbitmq-server-3.6.2/src/rabbit_file.erl rabbitmq-server-3.6.2-new/src/rabbit_file.erl
--- rabbitmq-server-3.6.2/src/rabbit_file.erl	2016-04-11 17:16:23.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_file.erl	2016-07-23 14:26:19.469169249 +0300
@@ -34,30 +34,30 @@
 
 -type(ok_or_error() :: rabbit_types:ok_or_error(any())).
 
--spec(is_file/1 :: ((file:filename())) -> boolean()).
--spec(is_dir/1 :: ((file:filename())) -> boolean()).
--spec(file_size/1 :: ((file:filename())) -> non_neg_integer()).
--spec(ensure_dir/1 :: ((file:filename())) -> ok_or_error()).
--spec(wildcard/2 :: (string(), file:filename()) -> [file:filename()]).
--spec(list_dir/1 :: (file:filename()) -> rabbit_types:ok_or_error2(
-                                           [file:filename()], any())).
--spec(read_term_file/1 ::
-        (file:filename()) -> {'ok', [any()]} | rabbit_types:error(any())).
--spec(write_term_file/2 :: (file:filename(), [any()]) -> ok_or_error()).
--spec(write_file/2 :: (file:filename(), iodata()) -> ok_or_error()).
--spec(write_file/3 :: (file:filename(), iodata(), [any()]) -> ok_or_error()).
--spec(append_file/2 :: (file:filename(), string()) -> ok_or_error()).
--spec(ensure_parent_dirs_exist/1 :: (string()) -> 'ok').
--spec(rename/2 ::
-        (file:filename(), file:filename()) -> ok_or_error()).
--spec(delete/1 :: ([file:filename()]) -> ok_or_error()).
--spec(recursive_delete/1 ::
+-spec is_file((file:filename())) -> boolean().
+-spec is_dir((file:filename())) -> boolean().
+-spec file_size((file:filename())) -> non_neg_integer().
+-spec ensure_dir((file:filename())) -> ok_or_error().
+-spec wildcard(string(), file:filename()) -> [file:filename()].
+-spec list_dir(file:filename()) -> rabbit_types:ok_or_error2(
+                                           [file:filename()], any()).
+-spec read_term_file
+        (file:filename()) -> {'ok', [any()]} | rabbit_types:error(any()).
+-spec write_term_file(file:filename(), [any()]) -> ok_or_error().
+-spec write_file(file:filename(), iodata()) -> ok_or_error().
+-spec write_file(file:filename(), iodata(), [any()]) -> ok_or_error().
+-spec append_file(file:filename(), string()) -> ok_or_error().
+-spec ensure_parent_dirs_exist(string()) -> 'ok'.
+-spec rename
+        (file:filename(), file:filename()) -> ok_or_error().
+-spec delete([file:filename()]) -> ok_or_error().
+-spec recursive_delete
         ([file:filename()])
-        -> rabbit_types:ok_or_error({file:filename(), any()})).
--spec(recursive_copy/2 ::
+        -> rabbit_types:ok_or_error({file:filename(), any()}).
+-spec recursive_copy
         (file:filename(), file:filename())
-        -> rabbit_types:ok_or_error({file:filename(), file:filename(), any()})).
--spec(lock_file/1 :: (file:filename()) -> rabbit_types:ok_or_error('eexist')).
+        -> rabbit_types:ok_or_error({file:filename(), file:filename(), any()}).
+-spec lock_file(file:filename()) -> rabbit_types:ok_or_error('eexist').
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_guid.erl rabbitmq-server-3.6.2-new/src/rabbit_guid.erl
--- rabbitmq-server-3.6.2/src/rabbit_guid.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_guid.erl	2016-07-23 14:29:05.548561310 +0300
@@ -38,12 +38,12 @@
 
 -type(guid() :: binary()).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(filename/0 :: () -> string()).
--spec(gen/0 :: () -> guid()).
--spec(gen_secure/0 :: () -> guid()).
--spec(string/2 :: (guid(), any()) -> string()).
--spec(binary/2 :: (guid(), any()) -> binary()).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec filename() -> string().
+-spec gen() -> guid().
+-spec gen_secure() -> guid().
+-spec string(guid(), any()) -> string().
+-spec binary(guid(), any()) -> binary().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_limiter.erl rabbitmq-server-3.6.2-new/src/rabbit_limiter.erl
--- rabbitmq-server-3.6.2/src/rabbit_limiter.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_limiter.erl	2016-07-23 15:32:34.864617186 +0300
@@ -149,33 +149,33 @@
 
 -type(credit_mode() :: 'manual' | 'drain' | 'auto').
 
--spec(start_link/1 :: (rabbit_types:proc_name()) ->
-                           rabbit_types:ok_pid_or_error()).
--spec(new/1 :: (pid()) -> lstate()).
-
--spec(limit_prefetch/3      :: (lstate(), non_neg_integer(), non_neg_integer())
-                               -> lstate()).
--spec(unlimit_prefetch/1    :: (lstate()) -> lstate()).
--spec(is_active/1           :: (lstate()) -> boolean()).
--spec(get_prefetch_limit/1  :: (lstate()) -> non_neg_integer()).
--spec(ack/2                 :: (lstate(), non_neg_integer()) -> 'ok').
--spec(pid/1                 :: (lstate()) -> pid()).
-
--spec(client/1       :: (pid()) -> qstate()).
--spec(activate/1     :: (qstate()) -> qstate()).
--spec(can_send/3     :: (qstate(), boolean(), rabbit_types:ctag()) ->
-                             {'continue' | 'suspend', qstate()}).
--spec(resume/1       :: (qstate()) -> qstate()).
--spec(deactivate/1   :: (qstate()) -> qstate()).
--spec(is_suspended/1 :: (qstate()) -> boolean()).
--spec(is_consumer_blocked/2 :: (qstate(), rabbit_types:ctag()) -> boolean()).
--spec(credit/5 :: (qstate(), rabbit_types:ctag(), non_neg_integer(),
-                   credit_mode(), boolean()) -> {boolean(), qstate()}).
--spec(ack_from_queue/3 :: (qstate(), rabbit_types:ctag(), non_neg_integer())
-                          -> {boolean(), qstate()}).
--spec(drained/1 :: (qstate())
-                   -> {[{rabbit_types:ctag(), non_neg_integer()}], qstate()}).
--spec(forget_consumer/2 :: (qstate(), rabbit_types:ctag()) -> qstate()).
+-spec start_link(rabbit_types:proc_name()) ->
+                           rabbit_types:ok_pid_or_error().
+-spec new(pid()) -> lstate().
+
+-spec limit_prefetch(lstate(), non_neg_integer(), non_neg_integer())
+                               -> lstate().
+-spec unlimit_prefetch(lstate()) -> lstate().
+-spec is_active(lstate()) -> boolean().
+-spec get_prefetch_limit(lstate()) -> non_neg_integer().
+-spec ack(lstate(), non_neg_integer()) -> 'ok'.
+-spec pid(lstate()) -> pid().
+
+-spec client(pid()) -> qstate().
+-spec activate(qstate()) -> qstate().
+-spec can_send(qstate(), boolean(), rabbit_types:ctag()) ->
+                             {'continue' | 'suspend', qstate()}.
+-spec resume(qstate()) -> qstate().
+-spec deactivate(qstate()) -> qstate().
+-spec is_suspended(qstate()) -> boolean().
+-spec is_consumer_blocked(qstate(), rabbit_types:ctag()) -> boolean().
+-spec credit(qstate(), rabbit_types:ctag(), non_neg_integer(),
+                   credit_mode(), boolean()) -> {boolean(), qstate()}.
+-spec ack_from_queue(qstate(), rabbit_types:ctag(), non_neg_integer())
+                          -> {boolean(), qstate()}.
+-spec drained(qstate())
+                   -> {[{rabbit_types:ctag(), non_neg_integer()}], qstate()}.
+-spec forget_consumer(qstate(), rabbit_types:ctag()) -> qstate().
 
 -endif.
 
@@ -434,7 +434,7 @@
             %% We randomly vary the position of queues in the list,
             %% thus ensuring that each queue has an equal chance of
             %% being notified first.
-            {L1, L2} = lists:split(random:uniform(L), QList),
+            {L1, L2} = lists:split(rand:uniform(L), QList),
             [[ok = rabbit_amqqueue:resume(Q, ChPid) || Q <- L3]
              || L3 <- [L2, L1]],
             ok
diff -urN rabbitmq-server-3.6.2/src/rabbit_log.erl rabbitmq-server-3.6.2-new/src/rabbit_log.erl
--- rabbitmq-server-3.6.2/src/rabbit_log.erl	2016-05-03 08:03:35.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_log.erl	2016-07-23 15:43:40.282181404 +0300
@@ -29,19 +29,19 @@
 -type(category() :: atom()).
 -type(level() :: 'debug' | 'info' | 'warning' | 'error').
 
--spec(log/3 :: (category(), level(), string()) -> 'ok').
--spec(log/4 :: (category(), level(), string(), [any()]) -> 'ok').
+-spec log(category(), level(), string()) -> 'ok'.
+-spec log(category(), level(), string(), [any()]) -> 'ok'.
 
--spec(debug/1   :: (string()) -> 'ok').
--spec(debug/2   :: (string(), [any()]) -> 'ok').
--spec(info/1    :: (string()) -> 'ok').
--spec(info/2    :: (string(), [any()]) -> 'ok').
--spec(warning/1 :: (string()) -> 'ok').
--spec(warning/2 :: (string(), [any()]) -> 'ok').
--spec(error/1   :: (string()) -> 'ok').
--spec(error/2   :: (string(), [any()]) -> 'ok').
+-spec debug(string()) -> 'ok'.
+-spec debug(string(), [any()]) -> 'ok'.
+-spec info(string()) -> 'ok'.
+-spec info(string(), [any()]) -> 'ok'.
+-spec warning(string()) -> 'ok'.
+-spec warning(string(), [any()]) -> 'ok'.
+-spec error(string()) -> 'ok'.
+-spec error(string(), [any()]) -> 'ok'.
 
--spec(with_local_io/1 :: (fun (() -> A)) -> A).
+-spec with_local_io(fun (() -> A)) -> A.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_memory_monitor.erl rabbitmq-server-3.6.2-new/src/rabbit_memory_monitor.erl
--- rabbitmq-server-3.6.2/src/rabbit_memory_monitor.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_memory_monitor.erl	2016-07-23 14:34:54.742283075 +0300
@@ -57,12 +57,12 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(register/2 :: (pid(), {atom(),atom(),[any()]}) -> 'ok').
--spec(deregister/1 :: (pid()) -> 'ok').
--spec(report_ram_duration/2 ::
-        (pid(), float() | 'infinity') -> number() | 'infinity').
--spec(stop/0 :: () -> 'ok').
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec register(pid(), {atom(),atom(),[any()]}) -> 'ok'.
+-spec deregister(pid()) -> 'ok'.
+-spec report_ram_duration
+        (pid(), float() | 'infinity') -> number() | 'infinity'.
+-spec stop() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_mirror_queue_coordinator.erl rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_coordinator.erl
--- rabbitmq-server-3.6.2/src/rabbit_mirror_queue_coordinator.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_coordinator.erl	2016-07-23 14:35:43.312105283 +0300
@@ -38,12 +38,12 @@
 
 -ifdef(use_specs).
 
--spec(start_link/4 :: (rabbit_types:amqqueue(), pid() | 'undefined',
+-spec start_link(rabbit_types:amqqueue(), pid() | 'undefined',
                        rabbit_mirror_queue_master:death_fun(),
                        rabbit_mirror_queue_master:depth_fun()) ->
-                           rabbit_types:ok_pid_or_error()).
--spec(get_gm/1 :: (pid()) -> pid()).
--spec(ensure_monitoring/2 :: (pid(), [pid()]) -> 'ok').
+                           rabbit_types:ok_pid_or_error().
+-spec get_gm(pid()) -> pid().
+-spec ensure_monitoring(pid(), [pid()]) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_mirror_queue_master.erl rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_master.erl
--- rabbitmq-server-3.6.2/src/rabbit_mirror_queue_master.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_master.erl	2016-07-23 14:37:04.801806988 +0300
@@ -64,16 +64,16 @@
                                  known_senders       :: sets:set()
                                }).
 
--spec(promote_backing_queue_state/8 ::
+-spec promote_backing_queue_state
         (rabbit_amqqueue:name(), pid(), atom(), any(), pid(), [any()],
-         dict:dict(), [pid()]) -> master_state()).
--spec(sender_death_fun/0 :: () -> death_fun()).
--spec(depth_fun/0 :: () -> depth_fun()).
--spec(init_with_existing_bq/3 :: (rabbit_types:amqqueue(), atom(), any()) ->
-                                      master_state()).
--spec(stop_mirroring/1 :: (master_state()) -> {atom(), any()}).
--spec(sync_mirrors/3 :: (stats_fun(), stats_fun(), master_state()) ->
-    {'ok', master_state()} | {stop, any(), master_state()}).
+         dict:dict(), [pid()]) -> master_state().
+-spec sender_death_fun() -> death_fun().
+-spec depth_fun() -> depth_fun().
+-spec init_with_existing_bq(rabbit_types:amqqueue(), atom(), any()) ->
+                                      master_state().
+-spec stop_mirroring(master_state()) -> {atom(), any()}.
+-spec sync_mirrors(stats_fun(), stats_fun(), master_state()) ->
+    {'ok', master_state()} | {stop, any(), master_state()}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_mirror_queue_misc.erl rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_misc.erl
--- rabbitmq-server-3.6.2/src/rabbit_mirror_queue_misc.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_misc.erl	2016-07-23 14:39:32.761265377 +0300
@@ -50,24 +50,24 @@
 
 -ifdef(use_specs).
 
--spec(remove_from_queue/3 ::
+-spec remove_from_queue
         (rabbit_amqqueue:name(), pid(), [pid()])
-        -> {'ok', pid(), [pid()], [node()]} | {'error', 'not_found'}).
--spec(on_node_up/0 :: () -> 'ok').
--spec(add_mirrors/3 :: (rabbit_amqqueue:name(), [node()], 'sync' | 'async')
-                       -> 'ok').
--spec(store_updated_slaves/1 :: (rabbit_types:amqqueue()) ->
-                                     rabbit_types:amqqueue()).
--spec(initial_queue_node/2 :: (rabbit_types:amqqueue(), node()) -> node()).
--spec(suggested_queue_nodes/1 :: (rabbit_types:amqqueue()) ->
-                                      {node(), [node()]}).
--spec(is_mirrored/1 :: (rabbit_types:amqqueue()) -> boolean()).
--spec(update_mirrors/2 ::
-        (rabbit_types:amqqueue(), rabbit_types:amqqueue()) -> 'ok').
--spec(maybe_drop_master_after_sync/1 :: (rabbit_types:amqqueue()) -> 'ok').
--spec(maybe_auto_sync/1 :: (rabbit_types:amqqueue()) -> 'ok').
--spec(log_info/3 :: (rabbit_amqqueue:name(), string(), [any()]) -> 'ok').
--spec(log_warning/3 :: (rabbit_amqqueue:name(), string(), [any()]) -> 'ok').
+        -> {'ok', pid(), [pid()], [node()]} | {'error', 'not_found'}.
+-spec on_node_up() -> 'ok'.
+-spec add_mirrors(rabbit_amqqueue:name(), [node()], 'sync' | 'async')
+                       -> 'ok'.
+-spec store_updated_slaves(rabbit_types:amqqueue()) ->
+                                     rabbit_types:amqqueue().
+-spec initial_queue_node(rabbit_types:amqqueue(), node()) -> node().
+-spec suggested_queue_nodes(rabbit_types:amqqueue()) ->
+                                      {node(), [node()]}.
+-spec is_mirrored(rabbit_types:amqqueue()) -> boolean().
+-spec update_mirrors
+        (rabbit_types:amqqueue(), rabbit_types:amqqueue()) -> 'ok'.
+-spec maybe_drop_master_after_sync(rabbit_types:amqqueue()) -> 'ok'.
+-spec maybe_auto_sync(rabbit_types:amqqueue()) -> 'ok'.
+-spec log_info(rabbit_amqqueue:name(), string(), [any()]) -> 'ok'.
+-spec log_warning(rabbit_amqqueue:name(), string(), [any()]) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_mirror_queue_mode_exactly.erl rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_mode_exactly.erl
--- rabbitmq-server-3.6.2/src/rabbit_mirror_queue_mode_exactly.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_mode_exactly.erl	2016-07-23 20:16:27.987266895 +0300
@@ -45,10 +45,10 @@
             end}.
 
 shuffle(L) ->
-    random:seed(erlang:phash2([node()]),
+    rand:seed(exs64, {erlang:phash2([node()]),
                 time_compat:monotonic_time(),
-                time_compat:unique_integer()),
-    {_, L1} = lists:unzip(lists:keysort(1, [{random:uniform(), N} || N <- L])),
+                time_compat:unique_integer()}),
+    {_, L1} = lists:unzip(lists:keysort(1, [{rand:uniform(), N} || N <- L])),
     L1.
 
 validate_policy(N) when is_integer(N) andalso N > 0 ->
diff -urN rabbitmq-server-3.6.2/src/rabbit_mirror_queue_slave.erl rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_slave.erl
--- rabbitmq-server-3.6.2/src/rabbit_mirror_queue_slave.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_slave.erl	2016-07-23 14:40:43.521006359 +0300
@@ -543,7 +543,7 @@
 handle_process_result({stop, State}) -> {stop, normal, State}.
 
 -ifdef(use_specs).
--spec(promote_me/2 :: ({pid(), term()}, #state{}) -> no_return()).
+-spec promote_me({pid(), term()}, #state{}) -> no_return().
 -endif.
 promote_me(From, #state { q                   = Q = #amqqueue { name = QName },
                           gm                  = GM,
diff -urN rabbitmq-server-3.6.2/src/rabbit_mirror_queue_sync.erl rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_sync.erl
--- rabbitmq-server-3.6.2/src/rabbit_mirror_queue_sync.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_mirror_queue_sync.erl	2016-07-23 14:41:27.635844875 +0300
@@ -61,21 +61,21 @@
 -type(slave_sync_state() :: {[{rabbit_types:msg_id(), ack()}], timer:tref(),
                              bqs()}).
 
--spec(master_prepare/4 :: (reference(), rabbit_amqqueue:name(),
-                               log_fun(), [pid()]) -> pid()).
--spec(master_go/8 :: (pid(), reference(), log_fun(),
+-spec master_prepare(reference(), rabbit_amqqueue:name(),
+                               log_fun(), [pid()]) -> pid().
+-spec master_go(pid(), reference(), log_fun(),
                       rabbit_mirror_queue_master:stats_fun(),
                       rabbit_mirror_queue_master:stats_fun(),
                       non_neg_integer(),
                       bq(), bqs()) ->
                           {'already_synced', bqs()} | {'ok', bqs()} |
                           {'shutdown', any(), bqs()} |
-                          {'sync_died', any(), bqs()}).
--spec(slave/7 :: (non_neg_integer(), reference(), timer:tref(), pid(),
+                          {'sync_died', any(), bqs()}.
+-spec slave(non_neg_integer(), reference(), timer:tref(), pid(),
                   bq(), bqs(), fun((bq(), bqs()) -> {timer:tref(), bqs()})) ->
                       'denied' |
                       {'ok' | 'failed', slave_sync_state()} |
-                      {'stop', any(), slave_sync_state()}).
+                      {'stop', any(), slave_sync_state()}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_mnesia.erl rabbitmq-server-3.6.2-new/src/rabbit_mnesia.erl
--- rabbitmq-server-3.6.2/src/rabbit_mnesia.erl	2016-04-21 12:04:28.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_mnesia.erl	2016-07-23 14:45:37.694929526 +0300
@@ -58,38 +58,38 @@
 -type(cluster_status() :: {[node()], [node()], [node()]}).
 
 %% Main interface
--spec(init/0 :: () -> 'ok').
--spec(join_cluster/2 :: (node(), node_type())
-                        -> 'ok' | {'ok', 'already_member'}).
--spec(reset/0 :: () -> 'ok').
--spec(force_reset/0 :: () -> 'ok').
--spec(update_cluster_nodes/1 :: (node()) -> 'ok').
--spec(change_cluster_node_type/1 :: (node_type()) -> 'ok').
--spec(forget_cluster_node/2 :: (node(), boolean()) -> 'ok').
--spec(force_load_next_boot/0 :: () -> 'ok').
+-spec init() -> 'ok'.
+-spec join_cluster(node(), node_type())
+                        -> 'ok' | {'ok', 'already_member'}.
+-spec reset() -> 'ok'.
+-spec force_reset() -> 'ok'.
+-spec update_cluster_nodes(node()) -> 'ok'.
+-spec change_cluster_node_type(node_type()) -> 'ok'.
+-spec forget_cluster_node(node(), boolean()) -> 'ok'.
+-spec force_load_next_boot() -> 'ok'.
 
 %% Various queries to get the status of the db
--spec(status/0 :: () -> [{'nodes', [{node_type(), [node()]}]} |
+-spec status() -> [{'nodes', [{node_type(), [node()]}]} |
                          {'running_nodes', [node()]} |
-                         {'partitions', [{node(), [node()]}]}]).
--spec(is_clustered/0 :: () -> boolean()).
--spec(on_running_node/1 :: (pid()) -> boolean()).
--spec(is_process_alive/1 :: (pid()) -> boolean()).
--spec(cluster_nodes/1 :: ('all' | 'disc' | 'ram' | 'running') -> [node()]).
--spec(node_type/0 :: () -> node_type()).
--spec(dir/0 :: () -> file:filename()).
--spec(cluster_status_from_mnesia/0 :: () -> rabbit_types:ok_or_error2(
-                                              cluster_status(), any())).
+                         {'partitions', [{node(), [node()]}]}].
+-spec is_clustered() -> boolean().
+-spec on_running_node(pid()) -> boolean().
+-spec is_process_alive(pid()) -> boolean().
+-spec cluster_nodes('all' | 'disc' | 'ram' | 'running') -> [node()].
+-spec node_type() -> node_type().
+-spec dir() -> file:filename().
+-spec cluster_status_from_mnesia() -> rabbit_types:ok_or_error2(
+                                              cluster_status(), any()).
 
 %% Operations on the db and utils, mainly used in `rabbit_upgrade' and `rabbit'
--spec(init_db_unchecked/2 :: ([node()], node_type()) -> 'ok').
--spec(copy_db/1 :: (file:filename()) ->  rabbit_types:ok_or_error(any())).
--spec(check_cluster_consistency/0 :: () -> 'ok').
--spec(ensure_mnesia_dir/0 :: () -> 'ok').
+-spec init_db_unchecked([node()], node_type()) -> 'ok'.
+-spec copy_db(file:filename()) ->  rabbit_types:ok_or_error(any()).
+-spec check_cluster_consistency() -> 'ok'.
+-spec ensure_mnesia_dir() -> 'ok'.
 
 %% Hooks used in `rabbit_node_monitor'
--spec(on_node_up/1 :: (node()) -> 'ok').
--spec(on_node_down/1 :: (node()) -> 'ok').
+-spec on_node_up(node()) -> 'ok'.
+-spec on_node_down(node()) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_mnesia_rename.erl rabbitmq-server-3.6.2-new/src/rabbit_mnesia_rename.erl
--- rabbitmq-server-3.6.2/src/rabbit_mnesia_rename.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_mnesia_rename.erl	2016-07-23 14:42:03.895712145 +0300
@@ -45,8 +45,8 @@
 
 -ifdef(use_specs).
 
--spec(rename/2 :: (node(), [{node(), node()}]) -> 'ok').
--spec(maybe_finish/1 :: ([node()]) -> 'ok').
+-spec rename(node(), [{node(), node()}]) -> 'ok'.
+-spec maybe_finish([node()]) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_msg_file.erl rabbitmq-server-3.6.2-new/src/rabbit_msg_file.erl
--- rabbitmq-server-3.6.2/src/rabbit_msg_file.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_msg_file.erl	2016-07-23 14:46:15.189792275 +0300
@@ -43,13 +43,13 @@
         fun (({rabbit_types:msg_id(), msg_size(), position(), binary()}, A) ->
                     A)).
 
--spec(append/3 :: (io_device(), rabbit_types:msg_id(), msg()) ->
-                       rabbit_types:ok_or_error2(msg_size(), any())).
--spec(read/2 :: (io_device(), msg_size()) ->
+-spec append(io_device(), rabbit_types:msg_id(), msg()) ->
+                       rabbit_types:ok_or_error2(msg_size(), any()).
+-spec read(io_device(), msg_size()) ->
                      rabbit_types:ok_or_error2({rabbit_types:msg_id(), msg()},
-                                               any())).
--spec(scan/4 :: (io_device(), file_size(), message_accumulator(A), A) ->
-                     {'ok', A, position()}).
+                                               any()).
+-spec scan(io_device(), file_size(), message_accumulator(A), A) ->
+                     {'ok', A, position()}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_msg_store.erl rabbitmq-server-3.6.2-new/src/rabbit_msg_store.erl
--- rabbitmq-server-3.6.2/src/rabbit_msg_store.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_msg_store.erl	2016-07-23 14:49:34.354063228 +0300
@@ -169,32 +169,32 @@
 -type(maybe_close_fds_fun() :: 'undefined' | fun (() -> 'ok')).
 -type(deletion_thunk() :: fun (() -> boolean())).
 
--spec(start_link/4 ::
+-spec start_link
         (atom(), file:filename(), [binary()] | 'undefined',
-         {msg_ref_delta_gen(A), A}) -> rabbit_types:ok_pid_or_error()).
--spec(successfully_recovered_state/1 :: (server()) -> boolean()).
--spec(client_init/4 :: (server(), client_ref(), maybe_msg_id_fun(),
-                        maybe_close_fds_fun()) -> client_msstate()).
--spec(client_terminate/1 :: (client_msstate()) -> 'ok').
--spec(client_delete_and_terminate/1 :: (client_msstate()) -> 'ok').
--spec(client_ref/1 :: (client_msstate()) -> client_ref()).
--spec(close_all_indicated/1 ::
-        (client_msstate()) -> rabbit_types:ok(client_msstate())).
--spec(write/3 :: (rabbit_types:msg_id(), msg(), client_msstate()) -> 'ok').
--spec(write_flow/3 :: (rabbit_types:msg_id(), msg(), client_msstate()) -> 'ok').
--spec(read/2 :: (rabbit_types:msg_id(), client_msstate()) ->
-                     {rabbit_types:ok(msg()) | 'not_found', client_msstate()}).
--spec(contains/2 :: (rabbit_types:msg_id(), client_msstate()) -> boolean()).
--spec(remove/2 :: ([rabbit_types:msg_id()], client_msstate()) -> 'ok').
+         {msg_ref_delta_gen(A), A}) -> rabbit_types:ok_pid_or_error().
+-spec successfully_recovered_state(server()) -> boolean().
+-spec client_init(server(), client_ref(), maybe_msg_id_fun(),
+                        maybe_close_fds_fun()) -> client_msstate().
+-spec client_terminate(client_msstate()) -> 'ok'.
+-spec client_delete_and_terminate(client_msstate()) -> 'ok'.
+-spec client_ref(client_msstate()) -> client_ref().
+-spec close_all_indicated
+        (client_msstate()) -> rabbit_types:ok(client_msstate()).
+-spec write(rabbit_types:msg_id(), msg(), client_msstate()) -> 'ok'.
+-spec write_flow(rabbit_types:msg_id(), msg(), client_msstate()) -> 'ok'.
+-spec read(rabbit_types:msg_id(), client_msstate()) ->
+                     {rabbit_types:ok(msg()) | 'not_found', client_msstate()}.
+-spec contains(rabbit_types:msg_id(), client_msstate()) -> boolean().
+-spec remove([rabbit_types:msg_id()], client_msstate()) -> 'ok'.
 
--spec(set_maximum_since_use/2 :: (server(), non_neg_integer()) -> 'ok').
--spec(has_readers/2 :: (non_neg_integer(), gc_state()) -> boolean()).
--spec(combine_files/3 :: (non_neg_integer(), non_neg_integer(), gc_state()) ->
-                              deletion_thunk()).
--spec(delete_file/2 :: (non_neg_integer(), gc_state()) -> deletion_thunk()).
--spec(force_recovery/2 :: (file:filename(), server()) -> 'ok').
--spec(transform_dir/3 :: (file:filename(), server(),
-        fun ((any()) -> (rabbit_types:ok_or_error2(msg(), any())))) -> 'ok').
+-spec set_maximum_since_use(server(), non_neg_integer()) -> 'ok'.
+-spec has_readers(non_neg_integer(), gc_state()) -> boolean().
+-spec combine_files(non_neg_integer(), non_neg_integer(), gc_state()) ->
+                              deletion_thunk().
+-spec delete_file(non_neg_integer(), gc_state()) -> deletion_thunk().
+-spec force_recovery(file:filename(), server()) -> 'ok'.
+-spec transform_dir(file:filename(), server(),
+        fun ((any()) -> (rabbit_types:ok_or_error2(msg(), any())))) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_msg_store_gc.erl rabbitmq-server-3.6.2-new/src/rabbit_msg_store_gc.erl
--- rabbitmq-server-3.6.2/src/rabbit_msg_store_gc.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_msg_store_gc.erl	2016-07-23 14:47:13.504578812 +0300
@@ -37,14 +37,14 @@
 
 -ifdef(use_specs).
 
--spec(start_link/1 :: (rabbit_msg_store:gc_state()) ->
-                           rabbit_types:ok_pid_or_error()).
--spec(combine/3 :: (pid(), rabbit_msg_store:file_num(),
-                    rabbit_msg_store:file_num()) -> 'ok').
--spec(delete/2 :: (pid(), rabbit_msg_store:file_num()) -> 'ok').
--spec(no_readers/2 :: (pid(), rabbit_msg_store:file_num()) -> 'ok').
--spec(stop/1 :: (pid()) -> 'ok').
--spec(set_maximum_since_use/2 :: (pid(), non_neg_integer()) -> 'ok').
+-spec start_link(rabbit_msg_store:gc_state()) ->
+                           rabbit_types:ok_pid_or_error().
+-spec combine(pid(), rabbit_msg_store:file_num(),
+                    rabbit_msg_store:file_num()) -> 'ok'.
+-spec delete(pid(), rabbit_msg_store:file_num()) -> 'ok'.
+-spec no_readers(pid(), rabbit_msg_store:file_num()) -> 'ok'.
+-spec stop(pid()) -> 'ok'.
+-spec set_maximum_since_use(pid(), non_neg_integer()) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_node_monitor.erl rabbitmq-server-3.6.2-new/src/rabbit_node_monitor.erl
--- rabbitmq-server-3.6.2/src/rabbit_node_monitor.erl	2016-05-03 08:03:35.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_node_monitor.erl	2016-07-23 15:58:47.483860563 +0300
@@ -47,31 +47,31 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
 
--spec(running_nodes_filename/0 :: () -> string()).
--spec(cluster_status_filename/0 :: () -> string()).
--spec(prepare_cluster_status_files/0 :: () -> 'ok').
--spec(write_cluster_status/1 :: (rabbit_mnesia:cluster_status()) -> 'ok').
--spec(read_cluster_status/0 :: () -> rabbit_mnesia:cluster_status()).
--spec(update_cluster_status/0 :: () -> 'ok').
--spec(reset_cluster_status/0 :: () -> 'ok').
-
--spec(notify_node_up/0 :: () -> 'ok').
--spec(notify_joined_cluster/0 :: () -> 'ok').
--spec(notify_left_cluster/1 :: (node()) -> 'ok').
-
--spec(partitions/0 :: () -> [node()]).
--spec(partitions/1 :: ([node()]) -> [{node(), [node()]}]).
--spec(status/1 :: ([node()]) -> {[{node(), [node()]}], [node()]}).
--spec(subscribe/1 :: (pid()) -> 'ok').
--spec(pause_partition_guard/0 :: () -> 'ok' | 'pausing').
-
--spec(all_rabbit_nodes_up/0 :: () -> boolean()).
--spec(run_outside_applications/2 :: (fun (() -> any()), boolean()) -> pid()).
--spec(ping_all/0 :: () -> 'ok').
--spec(alive_nodes/1 :: ([node()]) -> [node()]).
--spec(alive_rabbit_nodes/1 :: ([node()]) -> [node()]).
+-spec running_nodes_filename() -> string().
+-spec cluster_status_filename() -> string().
+-spec prepare_cluster_status_files() -> 'ok'.
+-spec write_cluster_status(rabbit_mnesia:cluster_status()) -> 'ok'.
+-spec read_cluster_status() -> rabbit_mnesia:cluster_status().
+-spec update_cluster_status() -> 'ok'.
+-spec reset_cluster_status() -> 'ok'.
+
+-spec notify_node_up() -> 'ok'.
+-spec notify_joined_cluster() -> 'ok'.
+-spec notify_left_cluster(node()) -> 'ok'.
+
+-spec partitions() -> [node()].
+-spec partitions([node()]) -> [{node(), [node()]}].
+-spec status([node()]) -> {[{node(), [node()]}], [node()]}.
+-spec subscribe(pid()) -> 'ok'.
+-spec pause_partition_guard() -> 'ok' | 'pausing'.
+
+-spec all_rabbit_nodes_up() -> boolean().
+-spec run_outside_applications(fun (() -> any()), boolean()) -> pid().
+-spec ping_all() -> 'ok'.
+-spec alive_nodes([node()]) -> [node()].
+-spec alive_rabbit_nodes([node()]) -> [node()].
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_password.erl rabbitmq-server-3.6.2-new/src/rabbit_password.erl
--- rabbitmq-server-3.6.2/src/rabbit_password.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_password.erl	2016-07-23 20:17:33.892025648 +0300
@@ -35,10 +35,10 @@
     <<SaltBin/binary, Hash/binary>>.
 
 generate_salt() ->
-    random:seed(erlang:phash2([node()]),
+    rand:seed(exs64, {erlang:phash2([node()]),
         time_compat:monotonic_time(),
-        time_compat:unique_integer()),
-    Salt = random:uniform(16#ffffffff),
+        time_compat:unique_integer()}),
+    Salt = rand:uniform(16#ffffffff),
     <<Salt:32>>.
 
 salted_hash(Salt, Cleartext) ->
diff -urN rabbitmq-server-3.6.2/src/rabbit_plugins.erl rabbitmq-server-3.6.2-new/src/rabbit_plugins.erl
--- rabbitmq-server-3.6.2/src/rabbit_plugins.erl	2016-04-11 17:16:23.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_plugins.erl	2016-07-23 14:53:53.308115318 +0300
@@ -26,14 +26,14 @@
 
 -type(plugin_name() :: atom()).
 
--spec(setup/0 :: () -> [plugin_name()]).
--spec(active/0 :: () -> [plugin_name()]).
--spec(list/1 :: (string()) -> [#plugin{}]).
--spec(list/2 :: (string(), boolean()) -> [#plugin{}]).
--spec(read_enabled/1 :: (file:filename()) -> [plugin_name()]).
--spec(dependencies/3 :: (boolean(), [plugin_name()], [#plugin{}]) ->
-                             [plugin_name()]).
--spec(ensure/1  :: (string()) -> {'ok', [atom()], [atom()]} | {error, any()}).
+-spec setup() -> [plugin_name()].
+-spec active() -> [plugin_name()].
+-spec list(string()) -> [#plugin{}].
+-spec list(string(), boolean()) -> [#plugin{}].
+-spec read_enabled(file:filename()) -> [plugin_name()].
+-spec dependencies(boolean(), [plugin_name()], [#plugin{}]) ->
+                             [plugin_name()].
+-spec ensure(string()) -> {'ok', [atom()], [atom()]} | {error, any()}.
 -endif.
 
 %%----------------------------------------------------------------------------
diff -urN rabbitmq-server-3.6.2/src/rabbit_plugins_main.erl rabbitmq-server-3.6.2-new/src/rabbit_plugins_main.erl
--- rabbitmq-server-3.6.2/src/rabbit_plugins_main.erl	2016-04-11 17:16:23.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_plugins_main.erl	2016-07-23 14:52:49.973347157 +0300
@@ -34,8 +34,8 @@
 
 -ifdef(use_specs).
 
--spec(start/0 :: () -> no_return()).
--spec(stop/0 :: () -> 'ok').
+-spec start() -> no_return().
+-spec stop() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_prelaunch.erl rabbitmq-server-3.6.2-new/src/rabbit_prelaunch.erl
--- rabbitmq-server-3.6.2/src/rabbit_prelaunch.erl	2016-04-11 17:16:23.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_prelaunch.erl	2016-07-23 15:44:47.281936149 +0300
@@ -32,8 +32,8 @@
 
 -ifdef(use_specs).
 
--spec(start/0 :: () -> no_return()).
--spec(stop/0 :: () -> 'ok').
+-spec start() -> no_return().
+-spec stop() -> 'ok'.
 
 -endif.
 
@@ -130,8 +130,8 @@
     end.
 
 -ifdef(use_specs).
--spec(dist_port_use_check_fail/2 :: (non_neg_integer(), string()) ->
-                                         no_return()).
+-spec dist_port_use_check_fail(non_neg_integer(), string()) ->
+                                         no_return().
 -endif.
 dist_port_use_check_fail(Port, Host) ->
     {ok, Names} = rabbit_nodes:names(Host),
diff -urN rabbitmq-server-3.6.2/src/rabbit_prequeue.erl rabbitmq-server-3.6.2-new/src/rabbit_prequeue.erl
--- rabbitmq-server-3.6.2/src/rabbit_prequeue.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_prequeue.erl	2016-07-23 14:54:46.522920524 +0300
@@ -39,8 +39,8 @@
 
 -type(start_mode() :: 'declare' | 'recovery' | 'slave').
 
--spec(start_link/3 :: (rabbit_types:amqqueue(), start_mode(), pid())
-                      -> rabbit_types:ok_pid_or_error()).
+-spec start_link(rabbit_types:amqqueue(), start_mode(), pid())
+                      -> rabbit_types:ok_pid_or_error().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_queue_index.erl rabbitmq-server-3.6.2-new/src/rabbit_queue_index.erl
--- rabbitmq-server-3.6.2/src/rabbit_queue_index.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_queue_index.erl	2016-07-23 14:57:00.367430581 +0300
@@ -223,35 +223,35 @@
                                {rabbit_types:msg_id(), non_neg_integer(), A})).
 -type(shutdown_terms() :: [term()] | 'non_clean_shutdown').
 
--spec(erase/1 :: (rabbit_amqqueue:name()) -> 'ok').
--spec(reset_state/1 :: (qistate()) -> qistate()).
--spec(init/3 :: (rabbit_amqqueue:name(),
-                 on_sync_fun(), on_sync_fun()) -> qistate()).
--spec(recover/6 :: (rabbit_amqqueue:name(), shutdown_terms(), boolean(),
+-spec erase(rabbit_amqqueue:name()) -> 'ok'.
+-spec reset_state(qistate()) -> qistate().
+-spec init(rabbit_amqqueue:name(),
+                 on_sync_fun(), on_sync_fun()) -> qistate().
+-spec recover(rabbit_amqqueue:name(), shutdown_terms(), boolean(),
                     contains_predicate(),
                     on_sync_fun(), on_sync_fun()) ->
                         {'undefined' | non_neg_integer(),
-                         'undefined' | non_neg_integer(), qistate()}).
--spec(terminate/2 :: ([any()], qistate()) -> qistate()).
--spec(delete_and_terminate/1 :: (qistate()) -> qistate()).
--spec(publish/6 :: (rabbit_types:msg_id(), seq_id(),
+                         'undefined' | non_neg_integer(), qistate()}.
+-spec terminate([any()], qistate()) -> qistate().
+-spec delete_and_terminate(qistate()) -> qistate().
+-spec publish(rabbit_types:msg_id(), seq_id(),
                     rabbit_types:message_properties(), boolean(),
-                    non_neg_integer(), qistate()) -> qistate()).
--spec(deliver/2 :: ([seq_id()], qistate()) -> qistate()).
--spec(ack/2 :: ([seq_id()], qistate()) -> qistate()).
--spec(sync/1 :: (qistate()) -> qistate()).
--spec(needs_sync/1 :: (qistate()) -> 'confirms' | 'other' | 'false').
--spec(flush/1 :: (qistate()) -> qistate()).
--spec(read/3 :: (seq_id(), seq_id(), qistate()) ->
+                    non_neg_integer(), qistate()) -> qistate().
+-spec deliver([seq_id()], qistate()) -> qistate().
+-spec ack([seq_id()], qistate()) -> qistate().
+-spec sync(qistate()) -> qistate().
+-spec needs_sync(qistate()) -> 'confirms' | 'other' | 'false'.
+-spec flush(qistate()) -> qistate().
+-spec read(seq_id(), seq_id(), qistate()) ->
                      {[{rabbit_types:msg_id(), seq_id(),
                         rabbit_types:message_properties(),
-                        boolean(), boolean()}], qistate()}).
--spec(next_segment_boundary/1 :: (seq_id()) -> seq_id()).
--spec(bounds/1 :: (qistate()) ->
-                       {non_neg_integer(), non_neg_integer(), qistate()}).
--spec(start/1 :: ([rabbit_amqqueue:name()]) -> {[[any()]], {walker(A), A}}).
+                        boolean(), boolean()}], qistate()}.
+-spec next_segment_boundary(seq_id()) -> seq_id().
+-spec bounds(qistate()) ->
+                       {non_neg_integer(), non_neg_integer(), qistate()}.
+-spec start([rabbit_amqqueue:name()]) -> {[[any()]], {walker(A), A}}.
 
--spec(add_queue_ttl/0 :: () -> 'ok').
+-spec add_queue_ttl() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_recovery_terms.erl rabbitmq-server-3.6.2-new/src/rabbit_recovery_terms.erl
--- rabbitmq-server-3.6.2/src/rabbit_recovery_terms.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_recovery_terms.erl	2016-07-23 14:58:23.262127143 +0300
@@ -36,11 +36,11 @@
 
 -ifdef(use_specs).
 
--spec(start() -> rabbit_types:ok_or_error(term())).
--spec(stop() -> rabbit_types:ok_or_error(term())).
--spec(store(file:filename(), term()) -> rabbit_types:ok_or_error(term())).
--spec(read(file:filename()) -> rabbit_types:ok_or_error2(term(), not_found)).
--spec(clear() -> 'ok').
+-spec start() -> rabbit_types:ok_or_error(term()).
+-spec stop() -> rabbit_types:ok_or_error(term()).
+-spec store(file:filename(), term()) -> rabbit_types:ok_or_error(term()).
+-spec read(file:filename()) -> rabbit_types:ok_or_error2(term(), not_found).
+-spec clear() -> 'ok'.
 
 -endif. % use_specs
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_registry.erl rabbitmq-server-3.6.2-new/src/rabbit_registry.erl
--- rabbitmq-server-3.6.2/src/rabbit_registry.erl	2016-04-11 17:16:23.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_registry.erl	2016-07-23 14:59:22.611909891 +0300
@@ -31,14 +31,14 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(register/3 :: (atom(), binary(), atom()) -> 'ok').
--spec(unregister/2 :: (atom(), binary()) -> 'ok').
--spec(binary_to_type/1 ::
-        (binary()) -> atom() | rabbit_types:error('not_found')).
--spec(lookup_module/2 ::
-        (atom(), atom()) -> rabbit_types:ok_or_error2(atom(), 'not_found')).
--spec(lookup_all/1 :: (atom()) -> [{atom(), atom()}]).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec register(atom(), binary(), atom()) -> 'ok'.
+-spec unregister(atom(), binary()) -> 'ok'.
+-spec binary_to_type
+        (binary()) -> atom() | rabbit_types:error('not_found').
+-spec lookup_module
+        (atom(), atom()) -> rabbit_types:ok_or_error2(atom(), 'not_found').
+-spec lookup_all(atom()) -> [{atom(), atom()}].
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_resource_monitor_misc.erl rabbitmq-server-3.6.2-new/src/rabbit_resource_monitor_misc.erl
--- rabbitmq-server-3.6.2/src/rabbit_resource_monitor_misc.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_resource_monitor_misc.erl	2016-07-23 14:59:48.316815797 +0300
@@ -21,8 +21,8 @@
 
 -ifdef(use_spec).
 
--spec(parse_information_unit/1 :: (integer() | string()) ->
-                                       {ok, integer()} | {error, parse_error}).
+-spec parse_information_unit(integer() | string()) ->
+                                       {ok, integer()} | {error, parse_error}.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_restartable_sup.erl rabbitmq-server-3.6.2-new/src/rabbit_restartable_sup.erl
--- rabbitmq-server-3.6.2/src/rabbit_restartable_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_restartable_sup.erl	2016-07-23 15:00:10.856733289 +0300
@@ -30,8 +30,8 @@
 
 -ifdef(use_specs).
 
--spec(start_link/3 :: (atom(), rabbit_types:mfargs(), boolean()) ->
-                           rabbit_types:ok_pid_or_error()).
+-spec start_link(atom(), rabbit_types:mfargs(), boolean()) ->
+                           rabbit_types:ok_pid_or_error().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_router.erl rabbitmq-server-3.6.2-new/src/rabbit_router.erl
--- rabbitmq-server-3.6.2/src/rabbit_router.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_router.erl	2016-07-23 15:00:47.731598308 +0300
@@ -29,12 +29,12 @@
 -type(routing_key() :: binary()).
 -type(match_result() :: [rabbit_types:binding_destination()]).
 
--spec(match_bindings/2 :: (rabbit_types:binding_source(),
+-spec match_bindings(rabbit_types:binding_source(),
                            fun ((rabbit_types:binding()) -> boolean())) ->
-    match_result()).
--spec(match_routing_key/2 :: (rabbit_types:binding_source(),
+    match_result().
+-spec match_routing_key(rabbit_types:binding_source(),
                              [routing_key()] | ['_']) ->
-    match_result()).
+    match_result().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_runtime_parameters.erl rabbitmq-server-3.6.2-new/src/rabbit_runtime_parameters.erl
--- rabbitmq-server-3.6.2/src/rabbit_runtime_parameters.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_runtime_parameters.erl	2016-07-23 15:03:03.226102326 +0300
@@ -62,31 +62,31 @@
 -type(ok_or_error_string() :: 'ok' | {'error_string', string()}).
 -type(ok_thunk_or_error_string() :: ok_or_error_string() | fun(() -> 'ok')).
 
--spec(parse_set/5 :: (rabbit_types:vhost(), binary(), binary(), string(),
-                      rabbit_types:user() | 'none') -> ok_or_error_string()).
--spec(set/5 :: (rabbit_types:vhost(), binary(), binary(), term(),
-                rabbit_types:user() | 'none') -> ok_or_error_string()).
--spec(set_any/5 :: (rabbit_types:vhost(), binary(), binary(), term(),
-                    rabbit_types:user() | 'none') -> ok_or_error_string()).
--spec(set_global/2 :: (atom(), term()) -> 'ok').
--spec(clear/3 :: (rabbit_types:vhost(), binary(), binary())
-                 -> ok_thunk_or_error_string()).
--spec(clear_any/3 :: (rabbit_types:vhost(), binary(), binary())
-                     -> ok_thunk_or_error_string()).
--spec(list/0 :: () -> [rabbit_types:infos()]).
--spec(list/1 :: (rabbit_types:vhost() | '_') -> [rabbit_types:infos()]).
--spec(list_component/1 :: (binary()) -> [rabbit_types:infos()]).
--spec(list/2 :: (rabbit_types:vhost() | '_', binary() | '_')
-                -> [rabbit_types:infos()]).
--spec(list_formatted/1 :: (rabbit_types:vhost()) -> [rabbit_types:infos()]).
--spec(list_formatted/3 :: (rabbit_types:vhost(), reference(), pid()) -> 'ok').
--spec(lookup/3 :: (rabbit_types:vhost(), binary(), binary())
-                  -> rabbit_types:infos() | 'not_found').
--spec(value/3 :: (rabbit_types:vhost(), binary(), binary()) -> term()).
--spec(value/4 :: (rabbit_types:vhost(), binary(), binary(), term()) -> term()).
--spec(value_global/1 :: (atom()) -> term() | 'not_found').
--spec(value_global/2 :: (atom(), term()) -> term()).
--spec(info_keys/0 :: () -> rabbit_types:info_keys()).
+-spec parse_set(rabbit_types:vhost(), binary(), binary(), string(),
+                      rabbit_types:user() | 'none') -> ok_or_error_string().
+-spec set(rabbit_types:vhost(), binary(), binary(), term(),
+                rabbit_types:user() | 'none') -> ok_or_error_string().
+-spec set_any(rabbit_types:vhost(), binary(), binary(), term(),
+                    rabbit_types:user() | 'none') -> ok_or_error_string().
+-spec set_global(atom(), term()) -> 'ok'.
+-spec clear(rabbit_types:vhost(), binary(), binary())
+                 -> ok_thunk_or_error_string().
+-spec clear_any(rabbit_types:vhost(), binary(), binary())
+                     -> ok_thunk_or_error_string().
+-spec list() -> [rabbit_types:infos()].
+-spec list(rabbit_types:vhost() | '_') -> [rabbit_types:infos()].
+-spec list_component(binary()) -> [rabbit_types:infos()].
+-spec list(rabbit_types:vhost() | '_', binary() | '_')
+                -> [rabbit_types:infos()].
+-spec list_formatted(rabbit_types:vhost()) -> [rabbit_types:infos()].
+-spec list_formatted(rabbit_types:vhost(), reference(), pid()) -> 'ok'.
+-spec lookup(rabbit_types:vhost(), binary(), binary())
+                  -> rabbit_types:infos() | 'not_found'.
+-spec value(rabbit_types:vhost(), binary(), binary()) -> term().
+-spec value(rabbit_types:vhost(), binary(), binary(), term()) -> term().
+-spec value_global(atom()) -> term() | 'not_found'.
+-spec value_global(atom(), term()) -> term().
+-spec info_keys() -> rabbit_types:info_keys().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_ssl.erl rabbitmq-server-3.6.2-new/src/rabbit_ssl.erl
--- rabbitmq-server-3.6.2/src/rabbit_ssl.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_ssl.erl	2016-07-23 15:03:57.695902937 +0300
@@ -31,13 +31,13 @@
 
 -type(certificate() :: binary()).
 
--spec(peer_cert_issuer/1        :: (certificate()) -> string()).
--spec(peer_cert_subject/1       :: (certificate()) -> string()).
--spec(peer_cert_validity/1      :: (certificate()) -> string()).
--spec(peer_cert_subject_items/2  ::
-        (certificate(), tuple()) -> [string()] | 'not_found').
--spec(peer_cert_auth_name/1 ::
-        (certificate()) -> binary() | 'not_found' | 'unsafe').
+-spec peer_cert_issuer(certificate()) -> string().
+-spec peer_cert_subject(certificate()) -> string().
+-spec peer_cert_validity(certificate()) -> string().
+-spec peer_cert_subject_items
+        (certificate(), tuple()) -> [string()] | 'not_found'.
+-spec peer_cert_auth_name
+        (certificate()) -> binary() | 'not_found' | 'unsafe'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_sup.erl rabbitmq-server-3.6.2-new/src/rabbit_sup.erl
--- rabbitmq-server-3.6.2/src/rabbit_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_sup.erl	2016-07-23 15:05:07.370647891 +0300
@@ -35,18 +35,18 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(start_child/1 :: (atom()) -> 'ok').
--spec(start_child/2 :: (atom(), [any()]) -> 'ok').
--spec(start_child/3 :: (atom(), atom(), [any()]) -> 'ok').
--spec(start_supervisor_child/1 :: (atom()) -> 'ok').
--spec(start_supervisor_child/2 :: (atom(), [any()]) -> 'ok').
--spec(start_supervisor_child/3 :: (atom(), atom(), [any()]) -> 'ok').
--spec(start_restartable_child/1 :: (atom()) -> 'ok').
--spec(start_restartable_child/2 :: (atom(), [any()]) -> 'ok').
--spec(start_delayed_restartable_child/1 :: (atom()) -> 'ok').
--spec(start_delayed_restartable_child/2 :: (atom(), [any()]) -> 'ok').
--spec(stop_child/1 :: (atom()) -> rabbit_types:ok_or_error(any())).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec start_child(atom()) -> 'ok'.
+-spec start_child(atom(), [any()]) -> 'ok'.
+-spec start_child(atom(), atom(), [any()]) -> 'ok'.
+-spec start_supervisor_child(atom()) -> 'ok'.
+-spec start_supervisor_child(atom(), [any()]) -> 'ok'.
+-spec start_supervisor_child(atom(), atom(), [any()]) -> 'ok'.
+-spec start_restartable_child(atom()) -> 'ok'.
+-spec start_restartable_child(atom(), [any()]) -> 'ok'.
+-spec start_delayed_restartable_child(atom()) -> 'ok'.
+-spec start_delayed_restartable_child(atom(), [any()]) -> 'ok'.
+-spec stop_child(atom()) -> rabbit_types:ok_or_error(any()).
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_table.erl rabbitmq-server-3.6.2-new/src/rabbit_table.erl
--- rabbitmq-server-3.6.2/src/rabbit_table.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_table.erl	2016-07-23 15:06:14.500402160 +0300
@@ -26,17 +26,17 @@
 
 -ifdef(use_specs).
 
--spec(create/0 :: () -> 'ok').
--spec(create_local_copy/1 :: ('disc' | 'ram') -> 'ok').
--spec(wait_for_replicated/0 :: () -> 'ok').
--spec(wait/1 :: ([atom()]) -> 'ok').
--spec(wait_timeout/0 :: () -> non_neg_integer() | infinity).
--spec(force_load/0 :: () -> 'ok').
--spec(is_present/0 :: () -> boolean()).
--spec(is_empty/0 :: () -> boolean()).
--spec(needs_default_data/0 :: () -> boolean()).
--spec(check_schema_integrity/0 :: () -> rabbit_types:ok_or_error(any())).
--spec(clear_ram_only_tables/0 :: () -> 'ok').
+-spec create() -> 'ok'.
+-spec create_local_copy('disc' | 'ram') -> 'ok'.
+-spec wait_for_replicated() -> 'ok'.
+-spec wait([atom()]) -> 'ok'.
+-spec wait_timeout() -> non_neg_integer() | infinity.
+-spec force_load() -> 'ok'.
+-spec is_present() -> boolean().
+-spec is_empty() -> boolean().
+-spec needs_default_data() -> boolean().
+-spec check_schema_integrity() -> rabbit_types:ok_or_error(any()).
+-spec clear_ram_only_tables() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_trace.erl rabbitmq-server-3.6.2-new/src/rabbit_trace.erl
--- rabbitmq-server-3.6.2/src/rabbit_trace.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_trace.erl	2016-07-23 15:07:05.785214430 +0300
@@ -30,17 +30,17 @@
 
 -type(state() :: rabbit_types:exchange() | 'none').
 
--spec(init/1 :: (rabbit_types:vhost()) -> state()).
--spec(enabled/1 :: (rabbit_types:vhost()) -> boolean()).
--spec(tap_in/6 :: (rabbit_types:basic_message(), [rabbit_amqqueue:name()],
+-spec init(rabbit_types:vhost()) -> state().
+-spec enabled(rabbit_types:vhost()) -> boolean().
+-spec tap_in(rabbit_types:basic_message(), [rabbit_amqqueue:name()],
                    binary(), rabbit_channel:channel_number(),
-                   rabbit_types:username(), state()) -> 'ok').
--spec(tap_out/5 :: (rabbit_amqqueue:qmsg(), binary(),
+                   rabbit_types:username(), state()) -> 'ok'.
+-spec tap_out(rabbit_amqqueue:qmsg(), binary(),
                     rabbit_channel:channel_number(),
-                    rabbit_types:username(), state()) -> 'ok').
+                    rabbit_types:username(), state()) -> 'ok'.
 
--spec(start/1 :: (rabbit_types:vhost()) -> 'ok').
--spec(stop/1 :: (rabbit_types:vhost()) -> 'ok').
+-spec start(rabbit_types:vhost()) -> 'ok'.
+-spec stop(rabbit_types:vhost()) -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_upgrade.erl rabbitmq-server-3.6.2-new/src/rabbit_upgrade.erl
--- rabbitmq-server-3.6.2/src/rabbit_upgrade.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_upgrade.erl	2016-07-23 15:10:41.699424069 +0300
@@ -28,10 +28,10 @@
 
 -ifdef(use_specs).
 
--spec(maybe_upgrade_mnesia/0 :: () -> 'ok').
--spec(maybe_upgrade_local/0 :: () -> 'ok' |
+-spec maybe_upgrade_mnesia() -> 'ok'.
+-spec maybe_upgrade_local() -> 'ok' |
                                      'version_not_available' |
-                                     'starting_from_scratch').
+                                     'starting_from_scratch'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_upgrade_functions.erl rabbitmq-server-3.6.2-new/src/rabbit_upgrade_functions.erl
--- rabbitmq-server-3.6.2/src/rabbit_upgrade_functions.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_upgrade_functions.erl	2016-07-23 15:10:15.784518932 +0300
@@ -57,35 +57,35 @@
 
 -ifdef(use_specs).
 
--spec(remove_user_scope/0     :: () -> 'ok').
--spec(hash_passwords/0        :: () -> 'ok').
--spec(add_ip_to_listener/0    :: () -> 'ok').
--spec(internal_exchanges/0    :: () -> 'ok').
--spec(user_to_internal_user/0 :: () -> 'ok').
--spec(topic_trie/0            :: () -> 'ok').
--spec(semi_durable_route/0    :: () -> 'ok').
--spec(exchange_event_serial/0 :: () -> 'ok').
--spec(trace_exchanges/0       :: () -> 'ok').
--spec(user_admin_to_tags/0    :: () -> 'ok').
--spec(ha_mirrors/0            :: () -> 'ok').
--spec(gm/0                    :: () -> 'ok').
--spec(exchange_scratch/0      :: () -> 'ok').
--spec(mirrored_supervisor/0   :: () -> 'ok').
--spec(topic_trie_node/0       :: () -> 'ok').
--spec(runtime_parameters/0    :: () -> 'ok').
--spec(policy/0                :: () -> 'ok').
--spec(sync_slave_pids/0       :: () -> 'ok').
--spec(no_mirror_nodes/0       :: () -> 'ok').
--spec(gm_pids/0               :: () -> 'ok').
--spec(exchange_decorators/0   :: () -> 'ok').
--spec(policy_apply_to/0       :: () -> 'ok').
--spec(queue_decorators/0      :: () -> 'ok').
--spec(internal_system_x/0     :: () -> 'ok').
--spec(cluster_name/0          :: () -> 'ok').
--spec(down_slave_nodes/0      :: () -> 'ok').
--spec(queue_state/0           :: () -> 'ok').
--spec(recoverable_slaves/0    :: () -> 'ok').
--spec(user_password_hashing/0 :: () -> 'ok').
+-spec remove_user_scope() -> 'ok'.
+-spec hash_passwords() -> 'ok'.
+-spec add_ip_to_listener() -> 'ok'.
+-spec internal_exchanges() -> 'ok'.
+-spec user_to_internal_user() -> 'ok'.
+-spec topic_trie() -> 'ok'.
+-spec semi_durable_route() -> 'ok'.
+-spec exchange_event_serial() -> 'ok'.
+-spec trace_exchanges() -> 'ok'.
+-spec user_admin_to_tags() -> 'ok'.
+-spec ha_mirrors() -> 'ok'.
+-spec gm() -> 'ok'.
+-spec exchange_scratch() -> 'ok'.
+-spec mirrored_supervisor() -> 'ok'.
+-spec topic_trie_node() -> 'ok'.
+-spec runtime_parameters() -> 'ok'.
+-spec policy() -> 'ok'.
+-spec sync_slave_pids() -> 'ok'.
+-spec no_mirror_nodes() -> 'ok'.
+-spec gm_pids() -> 'ok'.
+-spec exchange_decorators() -> 'ok'.
+-spec policy_apply_to() -> 'ok'.
+-spec queue_decorators() -> 'ok'.
+-spec internal_system_x() -> 'ok'.
+-spec cluster_name() -> 'ok'.
+-spec down_slave_nodes() -> 'ok'.
+-spec queue_state() -> 'ok'.
+-spec recoverable_slaves() -> 'ok'.
+-spec user_password_hashing() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_variable_queue.erl rabbitmq-server-3.6.2-new/src/rabbit_variable_queue.erl
--- rabbitmq-server-3.6.2/src/rabbit_variable_queue.erl	2016-04-21 12:04:28.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_variable_queue.erl	2016-07-23 15:11:17.644292492 +0300
@@ -406,9 +406,9 @@
              io_batch_size         :: pos_integer(),
              mode                  :: 'default' | 'lazy' }).
 %% Duplicated from rabbit_backing_queue
--spec(ack/2 :: ([ack()], state()) -> {[rabbit_guid:guid()], state()}).
+-spec ack([ack()], state()) -> {[rabbit_guid:guid()], state()}.
 
--spec(multiple_routing_keys/0 :: () -> 'ok').
+-spec multiple_routing_keys() -> 'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_version.erl rabbitmq-server-3.6.2-new/src/rabbit_version.erl
--- rabbitmq-server-3.6.2/src/rabbit_version.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_version.erl	2016-07-23 15:12:31.674021504 +0300
@@ -33,22 +33,22 @@
 
 -type(version() :: [atom()]).
 
--spec(recorded/0 :: () -> rabbit_types:ok_or_error2(version(), any())).
--spec(matches/2 :: ([A], [A]) -> boolean()).
--spec(desired/0 :: () -> version()).
--spec(desired_for_scope/1 :: (scope()) -> scope_version()).
--spec(record_desired/0 :: () -> 'ok').
--spec(record_desired_for_scope/1 ::
-        (scope()) -> rabbit_types:ok_or_error(any())).
--spec(upgrades_required/1 ::
-        (scope()) -> rabbit_types:ok_or_error2([step()], any())).
--spec(check_version_consistency/3 ::
-        (string(), string(), string()) -> rabbit_types:ok_or_error(any())).
--spec(check_version_consistency/4 ::
+-spec recorded() -> rabbit_types:ok_or_error2(version(), any()).
+-spec matches([A], [A]) -> boolean().
+-spec desired() -> version().
+-spec desired_for_scope(scope()) -> scope_version().
+-spec record_desired() -> 'ok'.
+-spec record_desired_for_scope
+        (scope()) -> rabbit_types:ok_or_error(any()).
+-spec upgrades_required
+        (scope()) -> rabbit_types:ok_or_error2([step()], any()).
+-spec check_version_consistency
+        (string(), string(), string()) -> rabbit_types:ok_or_error(any()).
+-spec check_version_consistency
         (string(), string(), string(), string()) ->
-                                          rabbit_types:ok_or_error(any())).
--spec(check_otp_consistency/1 ::
-        (string()) -> rabbit_types:ok_or_error(any())).
+                                          rabbit_types:ok_or_error(any()).
+-spec check_otp_consistency
+        (string()) -> rabbit_types:ok_or_error(any()).
 -endif.
 %% -------------------------------------------------------------------
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_vhost.erl rabbitmq-server-3.6.2-new/src/rabbit_vhost.erl
--- rabbitmq-server-3.6.2/src/rabbit_vhost.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_vhost.erl	2016-07-23 15:13:46.768746617 +0300
@@ -25,20 +25,20 @@
 
 -ifdef(use_specs).
 
--spec(add/1 :: (rabbit_types:vhost()) -> 'ok').
--spec(delete/1 :: (rabbit_types:vhost()) -> 'ok').
--spec(exists/1 :: (rabbit_types:vhost()) -> boolean()).
--spec(list/0 :: () -> [rabbit_types:vhost()]).
--spec(with/2 :: (rabbit_types:vhost(), rabbit_misc:thunk(A)) -> A).
--spec(assert/1 :: (rabbit_types:vhost()) -> 'ok').
+-spec add(rabbit_types:vhost()) -> 'ok'.
+-spec delete(rabbit_types:vhost()) -> 'ok'.
+-spec exists(rabbit_types:vhost()) -> boolean().
+-spec list() -> [rabbit_types:vhost()].
+-spec with(rabbit_types:vhost(), rabbit_misc:thunk(A)) -> A.
+-spec assert(rabbit_types:vhost()) -> 'ok'.
 
--spec(info/1 :: (rabbit_types:vhost()) -> rabbit_types:infos()).
--spec(info/2 :: (rabbit_types:vhost(), rabbit_types:info_keys())
-                -> rabbit_types:infos()).
--spec(info_all/0 :: () -> [rabbit_types:infos()]).
--spec(info_all/1 :: (rabbit_types:info_keys()) -> [rabbit_types:infos()]).
--spec(info_all/3 :: (rabbit_types:info_keys(), reference(), pid()) ->
-                         'ok').
+-spec info(rabbit_types:vhost()) -> rabbit_types:infos().
+-spec info(rabbit_types:vhost(), rabbit_types:info_keys())
+                -> rabbit_types:infos().
+-spec info_all() -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:info_keys()) -> [rabbit_types:infos()].
+-spec info_all(rabbit_types:info_keys(), reference(), pid()) ->
+                         'ok'.
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/rabbit_vm.erl rabbitmq-server-3.6.2-new/src/rabbit_vm.erl
--- rabbitmq-server-3.6.2/src/rabbit_vm.erl	2016-04-11 17:14:49.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/rabbit_vm.erl	2016-07-23 15:14:42.463542745 +0300
@@ -25,8 +25,8 @@
 
 -ifdef(use_specs).
 
--spec(memory/0 :: () -> rabbit_types:infos()).
--spec(binary/0 :: () -> rabbit_types:infos()).
+-spec memory() -> rabbit_types:infos().
+-spec binary() -> rabbit_types:infos().
 
 -endif.
 
@@ -227,11 +227,11 @@
                                   info_value())).
 -type(distinguisher() :: fun (([{term(), term()}]) -> atom())).
 -type(distinguishers() :: [{info_key(), distinguisher()}]).
--spec(sum_processes/3 :: ([process()], distinguishers(), [info_key()]) ->
-                              {[{process(), [info_item()]}], [info_item()]}).
--spec(sum_processes/4 :: ([process()], accumulate(), distinguishers(),
+-spec sum_processes([process()], distinguishers(), [info_key()]) ->
+                              {[{process(), [info_item()]}], [info_item()]}.
+-spec sum_processes([process()], accumulate(), distinguishers(),
                           [info_item()]) ->
-                              {[{process(), [info_item()]}], [info_item()]}).
+                              {[{process(), [info_item()]}], [info_item()]}.
 -endif.
 
 sum_processes(Names, Distinguishers, Items) ->
diff -urN rabbitmq-server-3.6.2/src/supervised_lifecycle.erl rabbitmq-server-3.6.2-new/src/supervised_lifecycle.erl
--- rabbitmq-server-3.6.2/src/supervised_lifecycle.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/supervised_lifecycle.erl	2016-07-23 15:17:31.547923806 +0300
@@ -38,8 +38,8 @@
 
 -ifdef(use_specs).
 
--spec(start_link/3 :: (atom(), rabbit_types:mfargs(), rabbit_types:mfargs()) ->
-                           rabbit_types:ok_pid_or_error()).
+-spec start_link(atom(), rabbit_types:mfargs(), rabbit_types:mfargs()) ->
+                           rabbit_types:ok_pid_or_error().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/tcp_listener.erl rabbitmq-server-3.6.2-new/src/tcp_listener.erl
--- rabbitmq-server-3.6.2/src/tcp_listener.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/tcp_listener.erl	2016-07-23 15:18:25.117727712 +0300
@@ -61,10 +61,10 @@
 
 -type(mfargs() :: {atom(), atom(), [any()]}).
 
--spec(start_link/5 ::
+-spec start_link
         (inet:ip_address(), inet:port_number(),
          mfargs(), mfargs(), string()) ->
-                           rabbit_types:ok_pid_or_error()).
+                           rabbit_types:ok_pid_or_error().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/tcp_listener_sup.erl rabbitmq-server-3.6.2-new/src/tcp_listener_sup.erl
--- rabbitmq-server-3.6.2/src/tcp_listener_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/tcp_listener_sup.erl	2016-07-23 15:17:58.147826436 +0300
@@ -35,10 +35,10 @@
 
 -type(mfargs() :: {atom(), atom(), [any()]}).
 
--spec(start_link/10 ::
+-spec start_link
         (inet:ip_address(), inet:port_number(), module(), [gen_tcp:listen_option()],
          module(), any(), mfargs(), mfargs(), integer(), string()) ->
-                           rabbit_types:ok_pid_or_error()).
+                           rabbit_types:ok_pid_or_error().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/vm_memory_monitor.erl rabbitmq-server-3.6.2-new/src/vm_memory_monitor.erl
--- rabbitmq-server-3.6.2/src/vm_memory_monitor.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/vm_memory_monitor.erl	2016-07-23 15:19:36.207467486 +0300
@@ -65,16 +65,16 @@
 -ifdef(use_specs).
 
 -type(vm_memory_high_watermark() :: (float() | {'absolute', integer() | string()})).
--spec(start_link/1 :: (float()) -> rabbit_types:ok_pid_or_error()).
--spec(start_link/3 :: (float(), fun ((any()) -> 'ok'),
-                       fun ((any()) -> 'ok')) -> rabbit_types:ok_pid_or_error()).
--spec(get_total_memory/0 :: () -> (non_neg_integer() | 'unknown')).
--spec(get_vm_limit/0 :: () -> non_neg_integer()).
--spec(get_check_interval/0 :: () -> non_neg_integer()).
--spec(set_check_interval/1 :: (non_neg_integer()) -> 'ok').
--spec(get_vm_memory_high_watermark/0 :: () -> vm_memory_high_watermark()).
--spec(set_vm_memory_high_watermark/1 :: (vm_memory_high_watermark()) -> 'ok').
--spec(get_memory_limit/0 :: () -> non_neg_integer()).
+-spec start_link(float()) -> rabbit_types:ok_pid_or_error().
+-spec start_link(float(), fun ((any()) -> 'ok'),
+                       fun ((any()) -> 'ok')) -> rabbit_types:ok_pid_or_error().
+-spec get_total_memory() -> (non_neg_integer() | 'unknown').
+-spec get_vm_limit() -> non_neg_integer().
+-spec get_check_interval() -> non_neg_integer().
+-spec set_check_interval(non_neg_integer()) -> 'ok'.
+-spec get_vm_memory_high_watermark() -> vm_memory_high_watermark().
+-spec set_vm_memory_high_watermark(vm_memory_high_watermark()) -> 'ok'.
+-spec get_memory_limit() -> non_neg_integer().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/worker_pool.erl rabbitmq-server-3.6.2-new/src/worker_pool.erl
--- rabbitmq-server-3.6.2/src/worker_pool.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/worker_pool.erl	2016-07-23 15:21:43.232002508 +0300
@@ -65,14 +65,14 @@
 
 -type(mfargs() :: {atom(), atom(), [any()]}).
 
--spec(start_link/1 :: (atom()) -> {'ok', pid()} | {'error', any()}).
--spec(submit/1 :: (fun (() -> A) | mfargs()) -> A).
--spec(submit/2 :: (fun (() -> A) | mfargs(), 'reuse' | 'single') -> A).
--spec(submit/3 :: (atom(), fun (() -> A) | mfargs(), 'reuse' | 'single') -> A).
--spec(submit_async/1 :: (fun (() -> any()) | mfargs()) -> 'ok').
--spec(ready/2 :: (atom(), pid()) -> 'ok').
--spec(idle/2 :: (atom(), pid()) -> 'ok').
--spec(default_pool/0 :: () -> atom()).
+-spec start_link(atom()) -> {'ok', pid()} | {'error', any()}.
+-spec submit(fun (() -> A) | mfargs()) -> A.
+-spec submit(fun (() -> A) | mfargs(), 'reuse' | 'single') -> A.
+-spec submit(atom(), fun (() -> A) | mfargs(), 'reuse' | 'single') -> A.
+-spec submit_async(fun (() -> any()) | mfargs()) -> 'ok'.
+-spec ready(atom(), pid()) -> 'ok'.
+-spec idle(atom(), pid()) -> 'ok'.
+-spec default_pool() -> atom().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/worker_pool_sup.erl rabbitmq-server-3.6.2-new/src/worker_pool_sup.erl
--- rabbitmq-server-3.6.2/src/worker_pool_sup.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/worker_pool_sup.erl	2016-07-23 15:20:10.297342698 +0300
@@ -26,10 +26,10 @@
 
 -ifdef(use_specs).
 
--spec(start_link/0 :: () -> rabbit_types:ok_pid_or_error()).
--spec(start_link/1 :: (non_neg_integer()) -> rabbit_types:ok_pid_or_error()).
--spec(start_link/2 :: (non_neg_integer(), atom())
-                   -> rabbit_types:ok_pid_or_error()).
+-spec start_link() -> rabbit_types:ok_pid_or_error().
+-spec start_link(non_neg_integer()) -> rabbit_types:ok_pid_or_error().
+-spec start_link(non_neg_integer(), atom())
+                   -> rabbit_types:ok_pid_or_error().
 
 -endif.
 
diff -urN rabbitmq-server-3.6.2/src/worker_pool_worker.erl rabbitmq-server-3.6.2-new/src/worker_pool_worker.erl
--- rabbitmq-server-3.6.2/src/worker_pool_worker.erl	2016-03-31 17:21:29.000000000 +0300
+++ rabbitmq-server-3.6.2-new/src/worker_pool_worker.erl	2016-07-23 15:20:51.227192873 +0300
@@ -37,12 +37,12 @@
 
 -type(mfargs() :: {atom(), atom(), [any()]}).
 
--spec(start_link/1 :: (atom) -> {'ok', pid()} | {'error', any()}).
--spec(next_job_from/2 :: (pid(), pid()) -> 'ok').
--spec(submit/3 :: (pid(), fun (() -> A) | mfargs(), 'reuse' | 'single') -> A).
--spec(submit_async/2 :: (pid(), fun (() -> any()) | mfargs()) -> 'ok').
--spec(run/1 :: (fun (() -> A)) -> A; (mfargs()) -> any()).
--spec(set_maximum_since_use/2 :: (pid(), non_neg_integer()) -> 'ok').
+-spec start_link(atom) -> {'ok', pid()} | {'error', any()}.
+-spec next_job_from(pid(), pid()) -> 'ok'.
+-spec submit(pid(), fun (() -> A) | mfargs(), 'reuse' | 'single') -> A.
+-spec submit_async(pid(), fun (() -> any()) | mfargs()) -> 'ok'.
+-spec run(fun (() -> A)) -> A; (mfargs()) -> any().
+-spec set_maximum_since_use(pid(), non_neg_integer()) -> 'ok'.
 
 -endif.
 
